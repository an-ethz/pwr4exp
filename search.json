[{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 pwr4exp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr4exp provides tools statistical power calculation experimental designs analyzed within linear mixed model framework, including fixed-effects mixed-effects models. Currently, package support generalized linear models; thus, normal response variables supported. Degrees freedom approximated using Satterthwaite method. vignette based development version package, incorporates various correlation structures repeated measures spatial data. also includes options generating input templates, simplifying setup execution power analyses. development version can downloaded GitHub:","code":"devtools::install_github(\"an-ethz/pwr4exp\") library(pwr4exp)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"package-overview","dir":"Articles","previous_headings":"Introduction","what":"Package overview","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Performing power analysis pwr4exp involves two main steps: Create design object: design object, power analysis conducted, needs created first. done using function mkdesign designs, functions designCRD, designRCBD, designLSD, designCOD, designSPD specific designs. Calculate power: statistical power F-test model terms t-test specific contrasts can evaluated using functions pwr.anova pwr.contrast sections following introduction dedicated two steps. Additional theory concepts listed end.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"mkdesign","dir":"Articles","previous_headings":"Create a design object","what":"mk_design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"function mkdesign designed create design specifying design’s data structure, intended model, necessary parameters. Inputs formula: right-hand-side model formula (uses lme4::lmer() syntax random effects). data: long-format data frame one row per observation columns independent variables specified formula (e.g., treatments, blocks, subjects). data reflect design structure exclude response variable. Unused variables formula ignored. beta means: Fixed-effects expectations. Specify either beta (vector regression coefficients) means (expected mean values fixed effects). one must provided. vcomp: Expected variance-covariance components random effects. sigma2: Expected error variance (residual variance). correlation: Correlation structure repeated measures spatial data. template: Logical; TRUE, generates templates beta, means, vcomp instead full design object. Output Returns list essential components required power calculation functions.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"templates","dir":"Articles","previous_headings":"Create a design object","what":"Templates","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Templates beta, means, vcomp can generated template = TRUE formula data provided. templates serve guides, outlining elements order parameter values beta, means, vcomp, based model data structure. , create example data frame illustrate templates, may represent realistic design. data frame includes: Four categorical variables (fA, fB, fC, fD), Two numerical variables (x, z).","code":"df1 <- expand.grid(    fA = factor(1:2), # factor A with 2 levels    fB = factor(1:2), # factor B with 2 levels    fC = factor(1:3), # factor C with 3 levels    fD = factor(1:3), # factor D with 3 levels    subject = factor(1:10)  # 10 subjects for each combination of factors  )  df1$x <- rnorm(nrow(df1))  # Numerical variable x  df1$z <- rnorm(nrow(df1))  # Numerical variable z"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"beta-template","dir":"Articles","previous_headings":"Create a design object > Templates","what":"beta template:","title":"pwr4exp: Power Analysis for Experimental Designs","text":"template beta specifies order model coefficients appear fitted model. especially useful directly providing expected model coefficients measures effect size. example, expected values model coefficients ~ fA*fB + x provided following sequence:","code":"mkdesign( ~ fA * fB + x, df1)$fixeff$beta #> (Intercept)         fA2         fB2           x     fA2:fB2  #>           1           2           3           4           5"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"means-template","dir":"Articles","previous_headings":"Create a design object > Templates","what":"means template:","title":"pwr4exp: Power Analysis for Experimental Designs","text":"many situations, direct convenient provide means categorical variables. template means represents marginal means categorical variables, regression coefficients numerical variables, conditional means regression coefficients interactions. Categorical variables without interactions Marginal means level categorical variable(s) required. example, expectations level fA fB follow sequence: Interactions among categorical variables Conditional (cell) means required combinations levels interacting categorical variables. instance, cell means 12 combinations levels fA, fB, fC, required following order: Numerical variables Regression coefficients required numerical variables. model includes numerical variables, (intercept) must also included. cases, means identical beta. interactions numerical variables, regression coefficients main effects interaction terms required. : Categorical--numerical interactions Marginal means categorical variable regression coefficients numerical variable level categorical variable required. example, means levels fA regression coefficients x level fA required model ~ fA * x: Combining Multiple Situations rules categorical numerical variables described also apply mixed situations. example, consider model combining: - Interactions among three categorical variables (fA, fB, fC) - categorical--numerical interaction (fD * x) - Main effects another numerical variable (z) required elements order means : - Means level fD (positions 1-3) - Regression coefficients z (position 4) - Regression coefficients x level fD (positions 5-7) - Cell means combinations levels fA, fB, fC (positions 8-19)","code":"mkdesign(~ fA + fB, df1, template = T)$fixeff$means #> fA1 fA2 fB1 fB2  #>   1   2   3   4 mkdesign(~ fA * fB * fC, df1)$fixeff$means #> fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2 fA2:fB1:fC2  #>           1           2           3           4           5           6  #> fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3 fA2:fB2:fC3  #>           7           8           9          10          11          12 mkdesign(~ x + z, df1)$fixeff$means #> (Intercept)           x           z  #>           1           2           3 mkdesign(~ x * z, df1)$fixeff$means #> (Intercept)           x           z         x:z  #>           1           2           3           4 mkdesign(~ fA * x, df1)$fixeff$means #>   fA1   fA2 fA1:x fA2:x  #>     1     2     3     4 mkdesign(~ fA * fB * fC + fD * x + z, df1)$fixeff$means #>         fD1         fD2         fD3           z       fD1:x       fD2:x  #>           1           2           3           4           5           6  #>       fD3:x fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2  #>           7           8           9          10          11          12  #> fA2:fB1:fC2 fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3  #>          13          14          15          16          17          18  #> fA2:fB2:fC3  #>          19"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"vcomp-template","dir":"Articles","previous_headings":"Create a design object > Templates","what":"vcomp template:","title":"pwr4exp: Power Analysis for Experimental Designs","text":"template vcomp represents variance-covariance matrix, integers indicate order variance components input vector. single random effect, template unnecessary, corresponds single variance value. multiple random effects, template outlines sequence variance covariance components provided. helps users specify align variance components random effects model. example, model contains random intercept random slop fA subject: template specifies following required inputs: 1. Variance random intercept (1st component) 2. Covariance random intercept fA2 (2nd component) 3. Variance fA2 (3rd component) Note: example may statistically correct given data. provided solely illustrate structure variance-covariance templates.","code":"mkdesign(~ fA * fB * fC * fD + (1 + fA | subject), df1)$varcov #> $subject #>             (Intercept) fA2 #> (Intercept)           1   2 #> fA2                   2   3"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"correlation-structures","dir":"Articles","previous_headings":"Create a design object","what":"Correlation structures","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Various correlation structures can specified following instructions nlme::corClasses, including - corAR1 - corARMA - corCAR1 - corCompSymm - corExp - corGaus - corLin - corSymm - corRatio - corSpher Note: nlme::corAR1() nlme::corARMA() p=1 q=0, time variable must integer. However, pwr4exp, restriction released, factors also supported.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"specific-design-functions","dir":"Articles","previous_headings":"Create a design object","what":"Specific design functions","title":"pwr4exp: Power Analysis for Experimental Designs","text":"mkdesign highly flexible creating design, long design’s data structure provided, pwr4exp also includes specific functions common standard designs. specialized functions define design characteristics, treatment structure replications, simplifying process manually creating data frame.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"completely-randomized-design","dir":"Articles","previous_headings":"Create a design object > Specific design functions","what":"Completely randomized design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"","code":"designCRD(treatments, label, replicates, formula, beta, means, sigma2, template = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"randomized-complete-block-design","dir":"Articles","previous_headings":"Create a design object > Specific design functions","what":"Randomized complete block design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"","code":"designRCBD(treatments, label, blocks, formula, beta, means, vcomp, sigma2, template = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"latin-square-design","dir":"Articles","previous_headings":"Create a design object > Specific design functions","what":"Latin square design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"","code":"designLSD(treatments, label, squares, reuse, formula, beta, means, vcomp, sigma2, template = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"crossover-design","dir":"Articles","previous_headings":"Create a design object > Specific design functions","what":"Crossover design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"special case LSD time periods individuals act blocks. Period blocks reused replicating squares.","code":"designCOD(treatments, label, squares, formula, beta, means, vcomp, sigma2, template = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"split-plot-design","dir":"Articles","previous_headings":"Create a design object > Specific design functions","what":"Split-plot design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"inputs functions mkdesign, except data replaced specifying treatment profile number replications. Specific inputs treatments: integer-valued vector specifying number levels treatment factors. maximum two factors allowed, arranged factorial design. example, treatments = c(3, 2) specifies one treatment factor 3 levels another 2 levels, forming factorial treatment design. trt.main trt.sub: define treatments main plot subplot, respectively, following rules treatment. label: optional list, whose entries labels used factor levels whose names treatment factors. label specified, default names labels assigned factors levels. one treatment factor, default list(trt = c(\"1\", \"2\", ...)). two factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), “facA” “facB” represent two factors, “1”, “2”, etc., represent levels factor. replicates: number experimental units per treatment CRD number main plots (.e., number experimental units per treatment main plot level) SPD. blocks: number blocks RCBD. squares: number squares replicated LSD COD. reuse: specifies replicate squares multiple squares. One : row reusing row blocks, col reusing column blocks, reusing row column blocks replicate single square. specific design-generating functions default formula based treatment structure (e.g., one factor factorial factors). formula specified, default formula main effects interactions (applicable) used internally. RCBD, LSD, COD, SPD designs, block factors fitted random effects. formula component output list can inspected.","code":"designSPD(trt.main, trt.sub, label, replicates, formula, beta, means, vcomp, sigma2, template = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation","dir":"Articles","previous_headings":"","what":"Power calculation","title":"pwr4exp: Power Analysis for Experimental Designs","text":"design object created, calculating power straightforward. Statistical power F-test omnibus tests can calculated using pwr.anova function. Inputs - object: design object created previous step - sig.level: significance level, default 0.05 - type: type ANOVA table, default Type III Statistical power t-test specific contrast can evaluated using pwr.contrast function. Inputs - object: design object - : factor interest - : variable condition - contrast: contrast method, include “pairwise”, “poly”, “trt.vs.ctrl”, manually defined contrast vector - sig.level: significance level, default 0.05 - p.adj: whether sig.level adjusted using Bonferroni method, default FALSE - alternative: “two.sided” “one.sided”. - strict: TRUE, default, power include probability rejection opposite direction true effect, two-sided case. Otherwise, power half significance level true difference zero.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-1--completely-randomized-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 1. Completely Randomized Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create CRD one treatment factor. design parameters follows: Treatments: 1 treatment factor 4 levels. Replicates: 8 experimental units per treatment. Mean effect size: expected means four levels 35, 30, 37, 38 Error variance: 15 Create CRD Power omnibus test Power specific contrasts power detecting differences treatments control: power detecting polynomial contrasts across treatment levels: power detecting pairwise comparison. data analysis, P-value significance level often needs adjusted multiple comparisons (MCP). commonly used methods MCP experimental data post-hoc, meaning directly applied power analysis stage. However, one can tune significance level mimic situations—instance, using lower significance level account MCP. pwr.contrast function also includes option adjust significance level using Bonferroni method, though approach may overly conservative.","code":"crd <- designCRD(   treatments = 4,   replicates = 8,   means = c(35, 30, 37, 38),   sigma2 = 15 ) pwr.anova(crd) #> Power of type III F-test #>     NumDF DenDF sig.level   power #> trt     3    28      0.05 0.95467 pwr.contrast(crd, which =  \"trt\", contrast = \"trt.vs.ctrl\") #>             effect df sig.level     power alternative #> trt2 - trt1     -5 28      0.05 0.7028739   two.sided #> trt3 - trt1      2 28      0.05 0.1694975   two.sided #> trt4 - trt1      3 28      0.05 0.3216803   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"poly\") #>           effect df sig.level     power alternative #> linear        16 28      0.05 0.7130735   two.sided #> quadratic      6 28      0.05 0.5617849   two.sided #> cubic        -18 28      0.05 0.8098383   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"pairwise\") #>             effect df sig.level      power alternative #> trt1 - trt2      5 28      0.05 0.70287390   two.sided #> trt1 - trt3     -2 28      0.05 0.16949749   two.sided #> trt1 - trt4     -3 28      0.05 0.32168033   two.sided #> trt2 - trt3     -7 28      0.05 0.93677955   two.sided #> trt2 - trt4     -8 28      0.05 0.97860686   two.sided #> trt3 - trt4     -1 28      0.05 0.07896844   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"pairwise\", sig.level = 0.01) #>             effect df sig.level     power alternative #> trt1 - trt2      5 28      0.01 0.4418907   two.sided #> trt1 - trt3     -2 28      0.01 0.0546995   two.sided #> trt1 - trt4     -3 28      0.01 0.1320866   two.sided #> trt2 - trt3     -7 28      0.01 0.7946290   two.sided #> trt2 - trt4     -8 28      0.01 0.9042775   two.sided #> trt3 - trt4     -1 28      0.01 0.0194487   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"pairwise\", sig.level = 0.01) #>             effect df sig.level     power alternative #> trt1 - trt2      5 28      0.01 0.4418907   two.sided #> trt1 - trt3     -2 28      0.01 0.0546995   two.sided #> trt1 - trt4     -3 28      0.01 0.1320866   two.sided #> trt2 - trt3     -7 28      0.01 0.7946290   two.sided #> trt2 - trt4     -8 28      0.01 0.9042775   two.sided #> trt3 - trt4     -1 28      0.01 0.0194487   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-2--randomized-complete-block-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 2. Randomized complete block design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create RCBD two treatment factors. design parameters follows: Treatments: 2x2 factorial design. Replicates: 8 blocks. Means: B1B2A13538A24041     \\begin{array}{c|c|c}  & B1 & B2 \\\\     \\hline     A1 & 35 & 38 \\\\     A2 & 40  & 41 \\\\     \\end{array}      corresponding beta values follows: intercept (A1B1): 35. effect A2 alone: 5 units effect B2 alone: 3 units interaction A2 B2: -2 units, meaning combined effect A2 B2 2 units additive effects. Variance among blocks: 11. Error variance: 4. total variance response variable (15) decomposed variance blocks (11) variance within blocks (4). Create RCBD templates: Provide design paramters, beta means, vcomp according order . Evaluate statistical power power main interaction effects. power testing difference levels factor conditioned factor B:","code":"designRCBD(treatments = c(2, 2), blocks = 8, template = TRUE) #> $fixeff #> $fixeff$beta #> (Intercept)       facA2       facB2 facA2:facB2  #>           1           2           3           4  #>  #> $fixeff$means #> facA1:facB1 facA2:facB1 facA1:facB2 facA2:facB2  #>           1           2           3           4  #>  #>  #> $varcov #> $varcov$block #>             (Intercept) #> (Intercept)           1 rcbd <- designRCBD(   treatments = c(2, 2),   blocks = 8,   # beta = c(35, 5, 3, -2), # identical to means   means = c(35, 40, 38, 41),   vcomp = 11,   sigma2 = 4 ) pwr.anova(rcbd) #> Power of type III F-test #>           NumDF DenDF sig.level   power #> facA          1    21      0.05 0.99969 #> facB          1    21      0.05 0.76950 #> facA:facB     1    21      0.05 0.27138 pwr.contrast(rcbd, which = \"facA\", by = \"facB\") #> $`facB = 1` #>               effect df sig.level     power alternative #> facA1 - facA2     -5 21      0.05 0.9974502   two.sided #>  #> $`facB = 2` #>               effect df sig.level     power alternative #> facA1 - facA2     -3 21      0.05 0.8160596   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-3--latin-square-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 3. Latin square design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, extend design Example 2 introducing another blocking factor, thus creating LSD. treatment structure effect sizes remain Example 2. design controls two sources variability (row column blocks) evaluating treatment effects. LSD, total variance (15) decomposed three components: Variance row blocks (11), Variance column blocks (2), Residual error variance (2). Input templates Either beta means can provided Example 2. Variance row blocking factors column block factors requried sequentially. Create LSD design created, pwr.anova pwr.contrast can used evaludate statistical power demonstrated .","code":"designLSD(   treatments = c(2, 2),   squares = 4,   reuse = \"both\",   template = TRUE ) #> $fixeff #> $fixeff$beta #> (Intercept)       facA2       facB2 facA2:facB2  #>           1           2           3           4  #>  #> $fixeff$means #> facA1:facB1 facA2:facB1 facA1:facB2 facA2:facB2  #>           1           2           3           4  #>  #>  #> $varcov #> $varcov$row #>             (Intercept) #> (Intercept)           1 #>  #> $varcov$col #>             (Intercept) #> (Intercept)           2 lsd <- designLSD(   treatments = c(2, 2),   label = list(temp = c(\"T1\", \"T2\"), dosage = c(\"D1\", \"D2\")),   squares = 4,   reuse = \"both\",   means = c(35, 40, 38, 41),   vcomp = c(11, 2),   sigma2 = 2 )"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-4-split-plot-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 4: Split-plot Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create SPD two treatment factors, one level. design parameters follows: Treatments: One main plot factor 2 levels, another factor 3 levels sub-plot level. Replicates: 5 plots per main plot treatment, resulting total 10 plots. standard SPD, plot (block subplot level) size assumed equal number treatments. Thus, design follows RCBD structure subplot level. corresponding cell means : trt.sub1trt.sub2trt.sub3trt.main1202224trt.main2222428 \\begin{array}{c|c|c}   & trt.sub1 & trt.sub2 & trt.sub3 \\\\ \\hline trt.main1 & 20 & 22 & 24\\\\ trt.main2 & 22 & 24 & 28 \\\\ \\end{array} total variance (15) assumed decompose 4 whole-plot error 11 subplot error. Inputs templates Create SPD","code":"designSPD(   trt.main = 2,   trt.sub = 3,    replicates = 10,    template = T ) #> $fixeff #> $fixeff$beta #>        (Intercept)          trt.main2           trt.sub2           trt.sub3  #>                  1                  2                  3                  4  #> trt.main2:trt.sub2 trt.main2:trt.sub3  #>                  5                  6  #>  #> $fixeff$means #> trt.main1:trt.sub1 trt.main2:trt.sub1 trt.main1:trt.sub2 trt.main2:trt.sub2  #>                  1                  2                  3                  4  #> trt.main1:trt.sub3 trt.main2:trt.sub3  #>                  5                  6  #>  #>  #> $varcov #> $varcov$mainplot #>             (Intercept) #> (Intercept)           1 spd <- designSPD(   trt.main = 2,   trt.sub = 3,    replicates = 10,    means = c(20, 22, 22, 24, 24, 28),   vcomp = 4,   sigma2 = 11 )"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-5-repeated-measures","dir":"Articles","previous_headings":"Practical Examples","what":"Example 5: Repeated measures","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example illustrates repeated measures design three treatments (CON, TRT1, TRT2) measured hourly 8 hours. Within-subject correlations modeled using AR(1) structure ρ=0.6\\rho = 0.6 σ2=2\\sigma^2 = 2. Design Details 1. Subjects: 6 per treatment group (total: 18 subjects). 2. Treatments: CON, TRT1, TRT2. 3. Time Points: 8 hourly measurements. 4. Means:𝐓𝐫𝐞𝐚𝐭𝐦𝐞𝐧𝐭𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖CON1.001.001.001.001.001.001.001.00TRT12.503.503.984.033.683.353.022.94TRT23.504.545.805.845.494.714.083.78 \\begin{array}{c|cccccccc} \\textbf{Treatment} & \\textbf{1} & \\textbf{2} & \\textbf{3} & \\textbf{4} & \\textbf{5} & \\textbf{6} & \\textbf{7} & \\textbf{8} \\\\ \\hline \\text{CON} & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 \\\\ \\text{TRT1} & 2.50 & 3.50 & 3.98 & 4.03 & 3.68 & 3.35 & 3.02 & 2.94 \\\\ \\text{TRT2} & 3.50 & 4.54 & 5.80 & 5.84 & 5.49 & 4.71 & 4.08 & 3.78 \\\\ \\end{array} Create data frame design Input templates Either values beta means required following order: Create design Power calculation Statistical power main effects treatment time, interaction: Statistical power treatment difference hour:","code":"n_subject = 6 # Subjects per treatment n_trt = 3 # Number of treatments n_hour = 8 # Number of repeated measures (time points) trt = c(\"CON\", \"TRT1\", \"TRT2\")  df.rep <- data.frame(   subject = as.factor(rep(seq_len(n_trt*n_subject), each = n_hour)),   hour = as.factor(rep(seq_len(n_hour), n_subject*n_trt)),   trt = rep(trt, each = n_subject*n_hour) ) mkdesign(formula = ~ trt*hour, data = df.rep) #> $fixeff #> $fixeff$beta #>   (Intercept)       trtTRT1       trtTRT2         hour2         hour3  #>             1             2             3             4             5  #>         hour4         hour5         hour6         hour7         hour8  #>             6             7             8             9            10  #> trtTRT1:hour2 trtTRT2:hour2 trtTRT1:hour3 trtTRT2:hour3 trtTRT1:hour4  #>            11            12            13            14            15  #> trtTRT2:hour4 trtTRT1:hour5 trtTRT2:hour5 trtTRT1:hour6 trtTRT2:hour6  #>            16            17            18            19            20  #> trtTRT1:hour7 trtTRT2:hour7 trtTRT1:hour8 trtTRT2:hour8  #>            21            22            23            24  #>  #> $fixeff$means #>  trtCON:hour1 trtTRT1:hour1 trtTRT2:hour1  trtCON:hour2 trtTRT1:hour2  #>             1             2             3             4             5  #> trtTRT2:hour2  trtCON:hour3 trtTRT1:hour3 trtTRT2:hour3  trtCON:hour4  #>             6             7             8             9            10  #> trtTRT1:hour4 trtTRT2:hour4  trtCON:hour5 trtTRT1:hour5 trtTRT2:hour5  #>            11            12            13            14            15  #>  trtCON:hour6 trtTRT1:hour6 trtTRT2:hour6  trtCON:hour7 trtTRT1:hour7  #>            16            17            18            19            20  #> trtTRT2:hour7  trtCON:hour8 trtTRT1:hour8 trtTRT2:hour8  #>            21            22            23            24  #>  #>  #> $varcov #> NULL design.rep <- mkdesign( formula = ~ trt*hour, data = df.rep, means =  c(1, 2.50, 3.5,            1, 3.50, 4.54,            1, 3.98, 5.80,            1, 4.03, 5.4,            1, 3.68, 5.49,            1, 3.35, 4.71,            1, 3.02, 4.08,            1, 2.94, 3.78), sigma2 = 2, correlation = corAR1(value = 0.6, form = ~ hour|subject) ) pwr.anova(design.rep) #> Power of type III F-test #>          NumDF  DenDF sig.level   power #> trt          2 21.563      0.05 1.00000 #> hour         7 86.055      0.05 0.74687 #> trt:hour    14 86.055      0.05 0.38500 pwr.contrast(design.rep, which = \"trt\", by = \"hour\", contrast = \"trt.vs.ctrl\", p.adj = TRUE) #> $`hour = 1` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON    1.5 64.41176     0.025 0.3299823   two.sided #> trtTRT2 - trtCON    2.5 64.41176     0.025 0.7765112   two.sided #>  #> $`hour = 2` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   2.50 64.41176     0.025 0.7765112   two.sided #> trtTRT2 - trtCON   3.54 64.41176     0.025 0.9777118   two.sided #>  #> $`hour = 3` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   2.98 64.41176     0.025 0.9093209   two.sided #> trtTRT2 - trtCON   4.80 64.41176     0.025 0.9997845   two.sided #>  #> $`hour = 4` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   3.03 64.41176     0.025 0.9187320   two.sided #> trtTRT2 - trtCON   4.40 64.41176     0.025 0.9988191   two.sided #>  #> $`hour = 5` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   2.68 64.41176     0.025 0.8355960   two.sided #> trtTRT2 - trtCON   4.49 64.41176     0.025 0.9991794   two.sided #>  #> $`hour = 6` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   2.35 64.41176     0.025 0.7191810   two.sided #> trtTRT2 - trtCON   3.71 64.41176     0.025 0.9865382   two.sided #>  #> $`hour = 7` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   2.02 64.41176     0.025 0.5730989   two.sided #> trtTRT2 - trtCON   3.08 64.41176     0.025 0.9273867   two.sided #>  #> $`hour = 8` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   1.94 64.41176     0.025 0.5351535   two.sided #> trtTRT2 - trtCON   2.78 64.41176     0.025 0.8635795   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"fundamental-concepts","dir":"Articles","previous_headings":"","what":"Fundamental concepts","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr4exp developed based linear mixed model (LMM) theory. general form LMM can expressed : y=Xβ+Zu+ε y = X\\beta + Zu + \\varepsilon : yy represents observations response variable, β\\beta represents fixed effect coefficients, uu denotes random effects, u∼Nq(0,G)u \\sim N_q(0, G), ε\\varepsilon represents random errors, ε∼Nn(0,R)\\varepsilon \\sim N_n(0, R), X(n×p)X_{(n \\times p)} Z(n×q)Z_{(n \\times q)} design matrices fixed random effects, respectively. assumed uu ε\\varepsilon independent, marginal distribution yy follows normal distribution y∼Nn(Xβ,V)y \\sim N_n(X\\beta, V), : V=ZGZT+R V = ZGZ^T + R","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"inference-on-treatment-effects","dir":"Articles","previous_headings":"Fundamental concepts","what":"Inference on Treatment Effects","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Inference treatment effects often involves testing omnibus hypotheses contrasts. can formulated using general linear hypothesis: H0:Kβ=0 H_0: K\\beta = 0 KK contrast matrix. variance-covariance parameters GG RR known, estimate β\\beta : β̂=(XTV−1X)−1XTV−1y \\hat{\\beta} = (X^TV^{-1}X)^{-1}X^TV^{-1}y variance : C=(XTV−1X)−1 C = (X^TV^{-1}X)^{-1} sampling distribution K′β̂K'\\hat{\\beta} : K′β̂∼N(0,K′CK) K'\\hat{\\beta} \\sim N(0, K'CK) However, practical situations, matrices GG RR unknown must estimated using methods like Maximum Likelihood (ML) Restricted ML (REML). estimate β\\beta obtained plugging estimated covariance matrices V̂\\hat{V}, : V̂=ZĜZT+R̂ \\hat{V} = Z\\hat{G}Z^T + \\hat{R} resulting estimate β\\beta : β̂=(XTV̂−1X)−1XTV̂−1y \\hat{\\beta} = (X^T\\hat{V}^{-1}X)^{-1}X^T\\hat{V}^{-1}y estimated variance : Ĉ=(XTV̂−1X)−1 \\hat{C} = (X^T\\hat{V}^{-1}X)^{-1} testing null hypothesis H0:Kβ=0H_0: K\\beta = 0, approximate F-statistic used. F-statistic given : F=(Kβ̂)T[KĈKT]−1(Kβ̂)v1 F = \\frac{(K\\hat{\\beta})^T [K\\hat{C}K^T]^{-1} (K\\hat{\\beta})}{v_1} FF follows approximate F-distribution F(v1,v2)F(v_1, v_2) H0H_0, v1=rank(K)≥1v_1 = \\text{rank}(K) \\geq 1 represents numerator degrees freedom (df), v2v_2 denominator df. rank(K)=1\\text{rank}(K) = 1, F-statistic simplifies square t-statistic: F=t2 F = t^2 t=k′β̂k′ĈKt = \\frac{k'\\hat{\\beta}}{\\sqrt{k'\\hat{C}K}} v2v_2 df. balanced designs, data analyzed using variance components model—commonly applied experimental animal research—v2v_2​ can precisely determined degrees freedom decomposition, applied analysis variance (ANOVA). However, general cases, v2v_2 must approximated using methods. Satterthwaite approximation (Satterthwaite, 1946) DF t-tests can calculated outlined Giesbrecht Burns (1985): v2=2(kTĈk)2gTAg v_2 = \\frac{2(k^T \\hat{C} k)^2}{g^T g} : - gg gradient kTC(θ̂)kk^T C(\\hat{\\theta}) k respect θ\\theta, variance-covariance parameters VV, evaluated θ̂\\hat{\\theta}. - Matrix AA asymptotic variance-covariance matrix θ̂\\hat{\\theta}, obtained information matrix ML REML estimation θ̂\\hat{\\theta} (Stroup, 2012). F-tests, v2v_2 can calculated following procedures described Fai Cornelius (1996). First, KCK̂TKC\\hat{K}^T decomposed yield KCK̂T=PTDPKC\\hat{K}^T = P^T D P, PP orthogonal matrix eigenvectors, DD diagonal matrix eigenvalues. Define kmCkmTk_m Ck_m^T, kmk_m mm-th row PKP K, let: vm=2(Dm)2gmTAgm v_m = \\frac{2(D_m)^2}{g_m^T g_m} : - DmD_m mm-th diagonal element DD. - gmg_m gradient kmCkmTk_m C k_m^T respect θ\\theta, evaluated θ̂\\hat{\\theta}. let: E=∑m=1v1vmvm−2I(vm>2) E = \\sum_{m=1}^{v_1} \\frac{v_m}{v_m - 2} (v_m > 2) (vm>2)(v_m > 2) denotes indicator function. denominator DF v2v_2 calculated : v2=2EE−v1 v_2 = \\frac{2E}{E - v_1}  Satterthwaite approximation can applied power analysis plugging assumed values variance parameters (Stroup, 2002).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation-under-the-alternative-hypothesis","dir":"Articles","previous_headings":"Fundamental concepts","what":"Power Calculation Under the Alternative Hypothesis","title":"pwr4exp: Power Analysis for Experimental Designs","text":"alternative hypothesis HA:K′β≠0H_A: K'\\beta \\neq 0, F-statistic follows non-central distribution F(v1,v2,ϕ)F(v_1, v_2, \\phi), ϕ\\phi non-centrality parameter measures departure null hypothesis H0H_0. non-centrality parameter ϕ\\phi given : ϕ=(Kβ̂)T[KĈKT]−1(Kβ̂) \\phi = (K\\hat{\\beta})^T [K\\hat{C}K^T]^{-1} (K\\hat{\\beta}) distribution F-statistic HAH_A known, power test can calculated conditional probability rejecting H0H_0 HAH_A true: Power=P(reject H0:F>Fcrit∣HA) \\text{Power} = P(\\text{reject } H_0: F > F_{\\text{crit}} \\mid H_A) : FcritF_{\\text{crit}} critical value F-statistic used reject H0H_0, determined P(F>Fcrit∣H0)=αP(F > F_{\\text{crit}} \\mid H_0) = \\alpha, α\\alpha type error rate. determination degrees freedom v1v_1 v2v_2, well non-centrality parameter ϕ\\phi, critical steps power calculation. Generally, power analysis requires specifying following components: Design evaluated, determines matrices XX (fixed effects) ZZ (random effects). Treatment Effects, determine β\\beta (fixed effect coefficients). Variance Components, determine GG (covariance matrix random effects) RR (covariance matrix residuals). key aspect conducting valid power analysis obtaining reasonable estimates magnitude parameters used model. includes: Treatment Effects (β\\beta): size treatment effect(s) expect detect. can obtained previous studies, pilot experiments, subject-matter expertise. Pilot studies preliminary data, can provide initial estimates variability random effects (e.g., subject--subject variability group-level variability). Literature similar experiments, variance components reported. Subject-matter expertise, researchers provide estimates based knowledge system studied. Performing power analysis unrealistic parameter magnitudes can lead incorrect conclusions, either overestimating likelihood detecting treatment effect requiring unnecessarily large sample size.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Satterthwaite, F. E. 1946. approximate distribution estimates variance components. Biometrics Bull. 2:110–114. Hrong-Tai Fai, ., & Cornelius, P. L. (1996). Approximate F-tests multiple degree freedom hypotheses generalized least squares analyses unbalanced split-plot experiments. Journal statistical computation simulation, 54(4), 363-378.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Wang. Author, maintainer, copyright holder. Mutian Niu. Author, copyright holder.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang K, Arshad U, Niu M (2024). “Enhancing quality dairy cattle research adequate power analysis.” agriRxiv. doi:10.31220/agriRxiv.2024.00278, Preprint.","code":"@Article{,   title = {Enhancing quality of dairy cattle research through adequate power analysis},   author = {Kai Wang and Usman Arshad and Mutian Niu},   journal = {agriRxiv},   year = {2024},   doi = {10.31220/agriRxiv.2024.00278},   publisher = {CABI},   note = {Preprint}, }"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwr4exp","dir":"","previous_headings":"","what":"Power Analysis for Research Experiments","title":"Power Analysis for Research Experiments","text":"pwr4exp supports statistical power calculations variety experimental designs data analysis conducted using linear mixed models. provides approximate F-tests general linear hypotheses t-tests specific contrasts linear mixed models, employing Satterthwaite method approximate degrees freedom. Various correlation structures (R-side) defined nlme package can used model relationship residuals.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Research Experiments","text":"","code":"# You can install pwr4exp from CRAN install.packages(\"pwr4exp\")  # Or the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"an-ethz/pwr4exp\") # Load the library library(pwr4exp)"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Power Analysis for Research Experiments","text":"Performing power analysis pwr4exp involves two main steps:","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"mkdesign","dir":"","previous_headings":"Functions > Step 1. Define the design","what":"mkdesign","title":"Power Analysis for Research Experiments","text":"mkdesign flexible function defining experimental design based data structure, statistical model, treatment effects, variance-covariance components. example, following code defines completely randomized design repeated measures: pwr4exp also provides functions common standard designs, allowing design defined specifying key characteristics like treatment structure replications, without manually creating data frame.","code":"# Create a data frame reflecting the data structure n_trt = 3 # Number of treatments trt = c(\"CON\", \"TRT1\", \"TRT2\") n_subject = 6 # Number of subjects per treatment n_hour = 8 # Number of repeated measures (time points)  df.rep <- data.frame(   subject = as.factor(rep(seq_len(n_trt*n_subject), each = n_hour)),   hour = as.factor(rep(seq_len(n_hour), n_subject*n_trt)),   trt = rep(trt, each = n_subject*n_hour) )  # Create the design object crd.rep <- mkdesign(   formula = ~ trt*hour, # model   data = df.rep, # a data frame reflecting the data structure   # treatment means at each hour reflecting effects   means =  c(1, 2.50, 3.5,              1, 3.50, 4.54,              1, 3.98, 5.80,              1, 4.03, 5.4,              1, 3.68, 5.49,              1, 3.35, 4.71,              1, 3.02, 4.08,              1, 2.94, 3.78),    sigma2 = 2, # residual variance   # residual correlation structure, AR1   correlation = corAR1(value = 0.6, form = ~ hour|subject)  ) # Create a completely randomized design crd <- designCRD(   treatments = 4, # one treatment factor with 4 levels   replicates = 12, # 12 experimental units per treatment   means = c(30, 28, 33, 35), # treatment means   sigma2 = 10 # error variance )  # Create a randomized complete block design rcbd <- designRCBD(   # two factors, each with 2 levels (2x2 factorial)   treatments = c(2, 2),    blocks = 10, # 10 blocks   means = c(30, 28, 33, 35), # treatment means (cell means)   vcomp = 6, # block variance   sigma2 = 4 # error variance )  # Create a Latin Square design lsd <- designLSD(   # two factors, with 2 and 3 levels, respectively (2x3 factorial)   treatments = c(2, 3),    squares = 4, # four squares   reuse = \"col\", # column blocks are identical acorss squares   means = c(30, 28, 33, 35, 34, 35), # treatment means (cell means)   vcomp = c(5, 2), # variances of blocking factor (row and column)   sigma2 = 3 # error variance )  # Create a split-plot design spd <- designSPD(   trt.main = 2, # one factor with two levels at main plot   trt.sub = 2, # one factor with two levels at subplot   # 10 units per main plot factor (blocks at subplot level)   replicates = 10,    means = c(30, 28, 33, 35), # treatment means (cell means)   vcomp = 7, # main plot error   sigma2 = 3 # residual error (subplot error) )  # If not specified, these functions internally use a default model formula that includes main effects and all interactions, with block factors fitted as random effects."},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"step-2-calculate-power","dir":"","previous_headings":"Functions","what":"Step 2. Calculate power","title":"Power Analysis for Research Experiments","text":"design correctly defined, design object can passed power calculation functions, including:","code":""},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwranova","dir":"","previous_headings":"Functions > Step 2. Calculate power","what":"pwr.anova","title":"Power Analysis for Research Experiments","text":"Computes power F-tests omnibus hypotheses.","code":"pwr.anova(crd.rep)"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwrcontrast","dir":"","previous_headings":"Functions > Step 2. Calculate power","what":"pwr.contrast","title":"Power Analysis for Research Experiments","text":"Computes power t-tests specific contrasts.","code":"pwr.contrast(crd.rep, which = \"trt\", by = \"hour\", contrast = \"trt.vs.ctrl\")"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Power Analysis for Research Experiments","text":"learn power analysis pwr4exp, refer vignette contains: Instructions preparing providing required inputs. Examples power calculations standard designs available package. Examples power analysis customized designs. Fundamental concepts statistical power linear mixed models. package documentation actively updated. questions suggestions, please feel free open issue GitHub repository contact package maintainer.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Standard Experimental Designs — designCRD","title":"Creation of Standard Experimental Designs — designCRD","text":"functions facilitate creation standard experimental designs commonly used agricultural studies power analysis. Instead supplying data frame mkdesign, users can specify key design characteristics generate design. design parameters consistent mkdesign.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Standard Experimental Designs — designCRD","text":"","code":"designCRD(   treatments,   label,   replicates,   formula,   beta = NULL,   means = NULL,   sigma2,   template = FALSE,   REML = TRUE )  designRCBD(   treatments,   label,   blocks,   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )  designLSD(   treatments,   label,   squares = 1,   reuse = c(\"row\", \"col\", \"both\"),   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )  designCOD(   treatments,   label,   squares = 1,   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )  designSPD(   trt.main,   trt.sub,   label,   replicates,   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Standard Experimental Designs — designCRD","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. replicates number experimental units per treatment completely randomized design number experimental units (main plots) per treatment main plot factors. formula right-hand-side formula specifying model testing treatment effects, terms right ~ , following lme4::lmer() syntax random effects. specified, default formula main effects interactions used internally. beta One optional inputs fixed effects. vector model coefficients factor variable coefficients correspond dummy variables created using \"contr.treatment\". means One optional inputs fixed effects. vector marginal conditioned means (factors interactions). Regression coefficients required numerical variables. Either beta means must provided, values must strictly follow specific order. template can created indicate required input values order. See mkdesign information. sigma2 error variance. template Default FALSE. TRUE, template beta, means, vcomp generated indicate required input order. REML Specifies whether use REML information matrix variance-covariance parameters instead ML method. Default TRUE. blocks number blocks. vcomp vector variance-covariance components random effects, present. values must follow strict order. See mkdesign. squares number replicated squares. default, 1, .e., replicated squares. reuse character string specifying replicate squares multiple squares. Options : \"row\" reusing row blocks, \"col\" reusing column blocks, \"\" reusing row column blocks replicate single square. trt.main integer-valued vector specifying treatment structure main plot level split plot design, similar treatments. trt.sub integer-valued vector specifying treatment structure sub plot level split plot design, similar treatments.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of Standard Experimental Designs — designCRD","text":"list critical components power analysis","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of Standard Experimental Designs — designCRD","text":"function creates specific design described : designCRD Completely Randomized Design. default, model formula ~ trt one factor ~ facA*facB two factors, unless explicitly specified. label argument provided, formula automatically updated specified treatment factor names. designRCBD Randomized Complete Block Design. default model formula ~ trt + (1|block) one factor ~ facA*facB + (1|block) two factors. label provided, fixed effect parts formula automatically updated specified names. label block factor (\"block\") formula changeable. designLSD Latin Square Design. default formula ~ trt + (1|row) + (1|col) one factor ~ facA*facB + (1|row) + (1|col) two factors. label provided, fixed effect parts formula automatically updated specified names. labels row (\"row\") column (\"col\") block factors changeable. designCOD Crossover Design, special case LSD time periods individuals blocks. Period blocks reused replicating squares. default formula ~ trt + (1|subject) + (1|period) one factor ~ facA*facB + (1|subject) + (1|period) two factors. label provided, fixed effect parts formula automatically updated specified names. Note \"subject\" \"period\" labels two blocking factors changed. designSPD Split Plot Design. default formula includes main effects treatment factors main sub-plot levels, interactions, random effects main plots: ~ . + (1|mainplot). label provided, fixed effect parts formula automatically updated specified names. experimental unit main plot level (.e., block factor subplot level) always named \"mainplot\".","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Standard Experimental Designs — designCRD","text":"","code":"# Example 1: Evaluate the power of a CRD with one treatment factor  ## Create a design object  crd <- designCRD(   treatments = 4, # 4 levels of one treatment factor   replicates = 12, # 12 units per level, 48 units totally   means = c(30, 28, 33, 35), # means of the 4 levels   sigma2 = 10 # error variance )  ## power of omnibus test pwr.anova(crd) #> Power of type III F-test #>     NumDF DenDF sig.level power #> trt     3    44      0.05 0.999  ## power of contrast pwr.contrast(crd, which = \"trt\", contrast = \"pairwise\") # pairwise comparisons #>             effect df sig.level     power alternative #> trt1 - trt2      2 44      0.05 0.3285822   two.sided #> trt1 - trt3     -3 44      0.05 0.6228308   two.sided #> trt1 - trt4     -5 44      0.05 0.9661638   two.sided #> trt2 - trt3     -5 44      0.05 0.9661638   two.sided #> trt2 - trt4     -7 44      0.05 0.9995822   two.sided #> trt3 - trt4     -2 44      0.05 0.3285822   two.sided pwr.contrast(crd, which = \"trt\", contrast = \"poly\") # polynomial contrasts #>           effect df sig.level     power alternative #> linear        20 44      0.05 0.9976700   two.sided #> quadratic      4 44      0.05 0.5726028   two.sided #> cubic        -10 44      0.05 0.6685119   two.sided  # More examples are available in the package vignette(\"pwr4exp\") # and on the package website: https://an-ethz.github.io/pwr4exp/"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Crossover design — df.cod","title":"Create a data frame for Crossover design — df.cod","text":"Create data frame Crossover design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Crossover design — df.cod","text":"","code":"df.cod(treatments, label, squares)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Crossover design — df.cod","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. squares number replicated squares. default, 1, .e., replicated squares.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Crossover design — df.cod","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of completely randomized design — df.crd","title":"Create a data frame of completely randomized design — df.crd","text":"Create data frame completely randomized design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of completely randomized design — df.crd","text":"","code":"df.crd(treatments, label, replicates)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of completely randomized design — df.crd","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)) Label sets arranged main plot factors come first, followed subplot factors. replicates number experimental units per treatment.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of completely randomized design — df.crd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Latin square design — df.lsd","title":"Create a data frame for Latin square design — df.lsd","text":"Create data frame Latin square design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Latin square design — df.lsd","text":"","code":"df.lsd(treatments, label, squares = 1, reuse = c(\"row\", \"col\", \"both\"))"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Latin square design — df.lsd","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. squares number replicated squares reuse character string specifying replicate squares multiple squares. Options : \"row\" reusing row blocks, \"col\" reusing column blocks, \"\" reusing row column blocks replicate single square.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Latin square design — df.lsd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of randomized complete block design — df.rcbd","title":"Create a data frame of randomized complete block design — df.rcbd","text":"Create data frame randomized complete block design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of randomized complete block design — df.rcbd","text":"","code":"df.rcbd(treatments, label, blocks)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of randomized complete block design — df.rcbd","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. blocks number blocks","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of randomized complete block design — df.rcbd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for split-plot design — df.spd","title":"Create data frame for split-plot design — df.spd","text":"Create data frame split-plot design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for split-plot design — df.spd","text":"","code":"df.spd(trt.main, trt.sub, label, replicates)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for split-plot design — df.spd","text":"trt.main integer-valued vector specifying treatment structure main plot level, similar df.crd. trt.sub integer-valued vector specifying treatment structure sub plot level, similar trt.main. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. replicates number experimental units (main plots) per treatment main plot factors.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for split-plot design — df.spd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":null,"dir":"Reference","previous_headings":"","what":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"Milk yield records 8 cows 4 different periods 4x4 crossover design. design includes 2 Latin squares, consisting 4 cows 4 periods.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"","code":"milk"},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"data frame 32 rows 4 variables: Cow Factor: Cow index (8 levels) Period Factor: Period index (4 levels) Treatment Factor: Treatment index (4 levels) MilkYield Numeric: milk yield recordings (kg)","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"Simulated data package demonstration purposes.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Design Object for Power Calculation — mkdesign","title":"Create a Design Object for Power Calculation — mkdesign","text":"Generates design object power analysis specifying model formula data frame. object true experimental design created design generation procedures, randomization unit allocation performed. Instead, serves object containing necessary information power analysis, including design matrices, assumed values model effects, necessary components.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Design Object for Power Calculation — mkdesign","text":"","code":"mkdesign(   formula,   data,   beta = NULL,   means = NULL,   vcomp = NULL,   sigma2 = NULL,   correlation = NULL,   template = FALSE,   REML = TRUE,   ... )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Design Object for Power Calculation — mkdesign","text":"formula right-hand-side formula specifying model testing treatment effects, terms right ~ , following lme4::lmer() syntax random effects. data data frame independent variables specified model, matching design's structure. beta One optional inputs fixed effects. vector model coefficients factor variable coefficients correspond dummy variables created using \"contr.treatment\". means One optional inputs fixed effects. vector marginal conditioned means (factors interactions). Regression coefficients required numerical variables. Either beta means must provided, values must strictly follow specific order. template can created indicate required input values order. See \"Details\" information. vcomp vector variance-covariance components random effects, present. values must follow strict order. See \"Details\". sigma2 error variance. correlation Specifies correlation structures using nlme::corClasses functions. See \"Details\" information. template Default FALSE. TRUE, template beta, means, vcomp generated indicate required input order. REML Specifies whether use REML ML estimates variance-covariance parameters. Default TRUE. ... Additional arguments passed internal functions.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Design Object for Power Calculation — mkdesign","text":"list object essential components power calculation.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Design Object for Power Calculation — mkdesign","text":"data: long-format data frame required, typically used R fitting linear models. data frame can created manually help design creation packages agricolae, crossdes, AlgDesign, FrF2. include independent variables specified model (e.g., treatments, blocks, subjects), generally determined experimental design phase. data frame may contain realizations response variable, mandatory ignored present. template: Templates automatically generated formula data supplied, explicitly template = TRUE. Templates serve guides specifying inputs: Template beta: Represents sequence model coefficients. Template means: Specifies order means (categorical variables) /regression coefficients (continuous variables), depending scenario: Categorical variables without interactions: Requires marginal means level categorical variable(s). Interactions among categorical variables: Requires conditional (cell) means level combinations. Numerical variables without interactions: Requires regression coefficients. intercept must also included categorical variables model. Interactions among numerical variables: Requires regression coefficients main effects interaction terms. intercept must also included categorical variables model. Categorical--numerical interactions: Requires regression coefficients numerical variable level categorical variable, well marginal means levels categorical variable. Note: models containing numerical variables, inputs means beta identical. See \"Examples\" illustrative scenarios. Template vcomp: Represents variance-covariance matrix, integers indicate order variance components input vector. correlation: Various correlation structures can specified following instructions nlme::corClasses. Note: nlme::corAR1() nlme::corARMA() p=1 q=0, time variable must integer. However, pwr4exp, restriction released, factors also supported.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Design Object for Power Calculation — mkdesign","text":"","code":"# Using templates for specifying \"means\"  # Create an example data frame with four categorical variables (factors) # and two numerical variables df1 <- expand.grid(   fA = factor(1:2),   fB = factor(1:2),   fC = factor(1:3),   fD = factor(1:3),   subject = factor(1:10) ) df1$x <- rnorm(nrow(df1))  # Numerical variable x df1$z <- rnorm(nrow(df1))  # Numerical variable z  ## Categorical variables without interactions # Means of each level of fA and fB are required in sequence. mkdesign(~ fA + fB, df1)$fixeff$means #> fA1 fA2 fB1 fB2  #>   1   2   3   4   ## Interactions among categorical variables # Cell means for all combinations of levels of fA and fB are required. mkdesign(~ fA * fB, df1)$fixeff$means #> fA1:fB1 fA2:fB1 fA1:fB2 fA2:fB2  #>       1       2       3       4   ## Numerical variables without and with interactions, identical to beta. # Without interactions: Regression coefficients are required mkdesign(~ x + z, df1)$fixeff$means #> (Intercept)           x           z  #>           1           2           3   # With interactions: Coefficients for main effects and interaction terms are required. mkdesign(~ x * z, df1)$fixeff$means #> (Intercept)           x           z         x:z  #>           1           2           3           4   ## Categorical-by-numerical interactions # Marginal means for each level of fA, and regression coefficients for x # at each level of fA are required. mkdesign(~ fA * x, df1)$fixeff$means #>   fA1   fA2 fA1:x fA2:x  #>     1     2     3     4   ## Three factors with interactions: # Cell means for all 12 combinations of the levels of fA, fB, and fC are required. mkdesign(~ fA * fB * fC, df1) #> $fixeff #> $fixeff$beta #> (Intercept)         fA2         fB2         fC2         fC3     fA2:fB2  #>           1           2           3           4           5           6  #>     fA2:fC2     fA2:fC3     fB2:fC2     fB2:fC3 fA2:fB2:fC2 fA2:fB2:fC3  #>           7           8           9          10          11          12  #>  #> $fixeff$means #> fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2 fA2:fB1:fC2  #>           1           2           3           4           5           6  #> fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3 fA2:fB2:fC3  #>           7           8           9          10          11          12  #>  #>  #> $varcov #> NULL #>   # A design that mixes the above-mentioned scenarios: # - Interactions among three categorical variables (fA, fB, fC) # - A categorical-by-numerical interaction (fD * x) # - Main effects for another numerical variable (z) # The required inputs are: # - Cell means for all combinations of levels of fA, fB, and fC # - Means for each level of fD # - Regression coefficients for x at each level of fD # - Regression coefficients for z mkdesign(~ fA * fB * fC + fD * x + z, df1)$fixeff$means #>         fD1         fD2         fD3           z       fD1:x       fD2:x  #>           1           2           3           4           5           6  #>       fD3:x fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2  #>           7           8           9          10          11          12  #> fA2:fB1:fC2 fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3  #>          13          14          15          16          17          18  #> fA2:fB2:fC3  #>          19   # Using templates for specifying \"vcomp\"  # Assume df1 represents an RCBD with \"subject\" as a random blocking factor. ## Variance of the random effect \"subject\" (intercept) is required. mkdesign(~ fA * fB * fC * fD + (1 | subject), df1)$varcov #> $subject #>             (Intercept) #> (Intercept)           1 #>   # Demonstration of templates for more complex random effects ## Note: This example is a demo and statistically incorrect for this data ## (no replicates under subject*fA). It only illustrates variance-covariance templates. ## Inputs required: ## - Variance of the random intercept (1st) ## - Covariance between the intercept and \"fA2\" (2nd) ## - Variance of \"fA2\" (3rd) mkdesign(~ fA * fB * fC * fD + (1 + fA | subject), df1)$varcov #> $subject #>             (Intercept) fA2 #> (Intercept)           1   2 #> fA2                   2   3 #>   # Power analysis for repeated measures  ## Create a data frame for a CRD with repeated measures n_subject <- 6 n_trt <- 3 n_hour <- 8 trt <- c(\"CON\", \"TRT1\", \"TRT2\") df2 <- data.frame(   subject = as.factor(rep(seq_len(n_trt * n_subject), each = n_hour)), # Subject as a factor   hour = as.factor(rep(seq_len(n_hour), n_subject * n_trt)),           # Hour as a factor   trt = rep(trt, each = n_subject * n_hour)                           # Treatment as a factor )  ## Templates temp <- mkdesign(formula = ~ trt * hour, data = df2) temp$fixeff$means  # Fixed effects means template #>  trtCON:hour1 trtTRT1:hour1 trtTRT2:hour1  trtCON:hour2 trtTRT1:hour2  #>             1             2             3             4             5  #> trtTRT2:hour2  trtCON:hour3 trtTRT1:hour3 trtTRT2:hour3  trtCON:hour4  #>             6             7             8             9            10  #> trtTRT1:hour4 trtTRT2:hour4  trtCON:hour5 trtTRT1:hour5 trtTRT2:hour5  #>            11            12            13            14            15  #>  trtCON:hour6 trtTRT1:hour6 trtTRT2:hour6  trtCON:hour7 trtTRT1:hour7  #>            16            17            18            19            20  #> trtTRT2:hour7  trtCON:hour8 trtTRT1:hour8 trtTRT2:hour8  #>            21            22            23            24  temp$vcov          # Variance-covariance template #> NULL  ## Create a design object # Assume repeated measures within a subject follow an AR1 process with a correlation of 0.6 design <- mkdesign(   formula = ~ trt * hour,   data = df2,   means = c(1, 2.50, 3.50,             1, 3.50, 4.54,             1, 3.98, 5.80,             1, 4.03, 5.40,             1, 3.68, 5.49,             1, 3.35, 4.71,             1, 3.02, 4.08,             1, 2.94, 3.78),   sigma2 = 2,   correlation = corAR1(value = 0.6, form = ~ hour | subject) )  pwr.anova(design)  # Perform power analysis #> Power of type III F-test #>          NumDF  DenDF sig.level   power #> trt          2 21.563      0.05 1.00000 #> hour         7 86.055      0.05 0.74687 #> trt:hour    14 86.055      0.05 0.38500  ## When time is treated as a numeric variable # Means of treatments and regression coefficients for hour at each treatment level are required df2$hour <- as.integer(df2$hour) mkdesign(formula = ~ trt * hour, data = df2)$fixeff$means #>       trtCON      trtTRT1      trtTRT2  trtCON:hour trtTRT1:hour trtTRT2:hour  #>            1            2            3            4            5            6   ## Polynomial terms of time in the model mkdesign(formula = ~ trt + hour + I(hour^2) + trt:hour + trt:I(hour^2), data = df2)$fixeff$means #>            trtCON           trtTRT1           trtTRT2       trtCON:hour  #>                 1                 2                 3                 4  #>      trtTRT1:hour      trtTRT2:hour  trtCON:I(hour^2) trtTRT1:I(hour^2)  #>                 5                 6                 7                 8  #> trtTRT2:I(hour^2)  #>                 9"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of omnibus tests — pwr.anova","title":"Power of omnibus tests — pwr.anova","text":"Calculate power testing overall effects treatment factors interactions, .e., statistical power F-test.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of omnibus tests — pwr.anova","text":"","code":"pwr.anova(object, sig.level = 0.05, type = c(\"III\", \"II\", \"I\", \"3\", \"2\", \"1\"))"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of omnibus tests — pwr.anova","text":"object design object created pwr4exp sig.level significance level, default 0.05 type type ANOVA table requested, default Type III","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of omnibus tests — pwr.anova","text":"data frame numerator degrees freedom (NumDF), denominator degrees freedom (DenDF), type error rate (sig.level), power.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of omnibus tests — pwr.anova","text":"","code":"# generate an RCBD rcbd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"1\", \"2\"), facB = c(\"1\", \"2\")),   blocks = 12,   formula = ~ facA*facB + (1|block),   means = c(32, 35, 30, 37),   vcomp = 4,   sigma2 = 6 ) # power of omnibus test pwr.anova(rcbd) #> Power of type III F-test #>           NumDF DenDF sig.level   power #> facA          1    33      0.05 1.00000 #> facB          1    33      0.05 0.05000 #> facA:facB     1    33      0.05 0.78387"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of contrasts — pwr.contrast","title":"Power of contrasts — pwr.contrast","text":"Calculate power testing various contrasts.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of contrasts — pwr.contrast","text":"","code":"pwr.contrast(   object,   which,   by = NULL,   contrast = c(\"pairwise\", \"poly\", \"trt.vs.ctrl\"),   sig.level = 0.05,   p.adj = FALSE,   alternative = c(\"two.sided\", \"one.sided\"),   strict = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of contrasts — pwr.contrast","text":"object design object created pwr4exp factor interest variable condition contrast contrast method, include \"pairwise\", \"poly\", \"trt.vs.ctrl\", manually defined contrast vector sig.level significance level, default 0.05 p.adj whether sig.level adjusted using Bonferroni method, default FALSE alternative one- two-sided test. Can abbreviated. strict use strict interpretation two-sided case","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of contrasts — pwr.contrast","text":"data frame list data frame separated conditions.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of contrasts — pwr.contrast","text":"","code":"rcbd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"1\", \"2\"), facB = c(\"1\", \"2\")),   blocks = 12,   formula = ~ facA*facB + (1|block),   means = c(32, 35, 30, 37),   vcomp = 4,   sigma2 = 6 ) pwr.contrast(rcbd, which = \"facA\", by = \"facB\") #> $`facB = 1` #>               effect df sig.level     power alternative #> facA1 - facA2     -3 33      0.05 0.8293757   two.sided #>  #> $`facB = 2` #>               effect df sig.level     power alternative #> facA1 - facA2     -7 33      0.05 0.9999993   two.sided #>"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":null,"dir":"Reference","previous_headings":"","what":"power of model coefficients — pwr.summary","title":"power of model coefficients — pwr.summary","text":"power model coefficients","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"power of model coefficients — pwr.summary","text":"","code":"pwr.summary(object, sig.level = 0.05)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"power of model coefficients — pwr.summary","text":"object design object created pwr4exp sig.level significance level, default 0.05","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"power of model coefficients — pwr.summary","text":"power table model coefficient","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"power of model coefficients — pwr.summary","text":"","code":"rcbd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"1\", \"2\"), facB = c(\"1\", \"2\")),   blocks = 12,   formula = ~ facA*facB + (1|block),   means = c(32, 35, 30, 37),   vcomp = 4,   sigma2 = 6 ) pwr.summary(rcbd) #>             effect       df sig.level     power alternative #> (Intercept)     32 29.72973      0.05 1.0000000   two.sided #> facA2            3 33.00000      0.05 0.8293757   two.sided #> facB2           -2 33.00000      0.05 0.4927485   two.sided #> facA2:facB2      4 33.00000      0.05 0.7838664   two.sided"},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/news/index.html","id":"pwr4exp-010","dir":"Changelog","previous_headings":"","what":"pwr4exp 0.1.0","title":"pwr4exp 0.1.0","text":"CRAN release: 2024-10-11 Initial CRAN submission.","code":""}]
