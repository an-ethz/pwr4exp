[{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://an-ethz.github.io/pwr4exp/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr4exp R package performing statistical power analysis experiments analyzed using linear mixed models (LMM). supports power calculations omnibus F-tests (ANOVA-like tests) specific contrasts (t-tests) Gaussian response variables, employing Satterthwaite approximation degrees freedom. Key features: Consistency: Specify model formula ensure consistency power analysis data analysis. Flexibility: Support variety experimental designs either general-purpose function (mkdesign) specialized functions (e.g., designCRD, designRCBD, designLSD, designCOD, designSPD) standard designs. Correlation structures: Allow specification various residual variance-covariance structures, essential analyzing repeated measures, spatial, correlated data. workflow involves two main steps: Creating design object: Defining experimental structure specifying parameters (fixed effects, (co-)variances). Calculating power: Computing power F-tests t-tests effects interest.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"design","dir":"Articles","previous_headings":"","what":"Creating a design object","title":"pwr4exp: Power Analysis for Experimental Designs","text":"design object pwr4exp list containing design matrices, fixed effects, variance-covariance components, higher-level parameters created design-generating functions. experimental design traditional sense, randomization unit allocation performed, rather container information necessary conduct power analysis. Two approaches provided define design: General approach mkdesign: design object can created providing model formula data frame outlines experimental layout. Standard designs Specific Functions: Functions designCRD, designRCBD, designLSD, designCOD, designSPD generate design objects common experimental setups. functions allow specification design characteristics (e.g., number treatments, blocks, replicates) automatically handle creation data frame.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"mkdesign","dir":"Articles","previous_headings":"Creating a design object","what":"The mkdesign function","title":"pwr4exp: Power Analysis for Experimental Designs","text":"function mkdesign versatile designs long data frame provided. Usage Arguments formula: right-hand-side model formula defines fixed random effects. (Use lme4::lmer syntax specifying random effects.) data: data frame containing independent variables required model, consistent design’s structure. means beta: Expected fixed effects. Either vector model coefficients (beta) expected means (means) must provided. Templates parameter ordering can generated setting template = TRUE. vcomp: Variance components random effects present model, provided numeric vector. template input ordering can generated setting template = TRUE. sigma2: residual variance. correlation: (Optional) correlation structure (nlme::corClasses) repeated measures. template: set TRUE formula data arguments provided, templates beta, means, vcomp generated indicate required input order. REML: (logical) Whether use REML ML information matrix. default TRUE (REML).","code":"mkdesign(   formula, data,   beta = NULL, means = NULL,   vcomp = NULL, sigma2 = NULL,   correlation = NULL,   template = FALSE,   REML = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"standard_design","dir":"Articles","previous_headings":"Creating a design object","what":"Specific design functions","title":"pwr4exp: Power Analysis for Experimental Designs","text":"mkdesign provides full flexibility, pwr4exp also offers specific functions common experimental designs. functions allow users define design based treatment structure replications without manually creating data frame. Completely randomized design (CRD) Randomized complete block design (RCBD) Latin square design (LSD) Crossover design special case LSD time periods individuals act blocks. Period blocks reused replicating squares. Split-plot design (SPD) inputs functions similar mkdesign, except data replaced predefined design characteristics treatment levels replications. Key inputs treatments: numeric vector specifying number levels treatment factors. Multiple factors arranged factorially. example, treatments = c(3, 2) specifies two treatment factors one 3 levels another 2 levels, forming factorial treatment design. trt.main trt.sub: Define main-plot subplot treatments SPD, following rule treatment. label: (optional) list assigning labels factor levels. specified, default names assigned. one treatment factor, default list(trt = c(\"1\", \"2\", ...)). two factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)), “facA” “facB” represent two factors, “1”, “2”, etc., represent levels factor. replicates: Number experimental units per treatment CRD number main plots (.e., number experimental units per main-plot treatment) SPD. blocks: Number blocks RCBD. squares: Number squares LSD COD. reuse: Specifies squares replicated LSD. One : \"row\": reuse row blocks \"col\": reuse column blocks \"\": reuse row column blocks template: set TRUE, templates beta, means, vcomp generated indicate required input order. design-generating functions default formula based treatment structure (e.g., one factor factorial factors). formula specified, default formula main effects interactions (applicable) used internally. RCBD, LSD, COD, SPD designs, block factors fitted random effects. formula component output design object (list) can inspected.","code":"designCRD(treatments, label, replicates, formula, beta, means, sigma2, template = FALSE) designRCBD(treatments, label, blocks, formula, beta, means, vcomp, sigma2, template = FALSE) designLSD(treatments, label, squares, reuse, formula, beta, means, vcomp, sigma2, template = FALSE) designCOD(treatments, label, squares, formula, beta, means, vcomp, sigma2, template = FALSE) designSPD(trt.main, trt.sub, label, replicates, formula, beta, means, vcomp, sigma2, template = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"template","dir":"Articles","previous_headings":"Creating a design object","what":"Parameter templates","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Templates help ensure correct ordering fixed effects (beta means) random effects (vcomp). , exemplary data frame created illustrate templates. Note example represent realistic design. data frame includes: Four categorical variables (fA, fB, fC, fD), Two numerical variables (x, z).","code":"df1 <- expand.grid(    fA = factor(1:2), # factor A with 2 levels    fB = factor(1:2), # factor B with 2 levels    fC = factor(1:3), # factor C with 3 levels    fD = factor(1:3), # factor D with 3 levels    subject = factor(1:10)  # 10 subjects  )  df1$x <- rnorm(nrow(df1))  # Numerical variable x  df1$z <- rnorm(nrow(df1))  # Numerical variable z"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"fixeff_template","dir":"Articles","previous_headings":"Creating a design object > Parameter templates","what":"beta Template","title":"pwr4exp: Power Analysis for Experimental Designs","text":"beta template displays order model coefficients fitted model. particularly useful specifying expected model coefficients directly effect size measures model includes complex interactions. example, expected values model coefficients ~ fA*fB + x provided following sequence:","code":"mkdesign( ~ fA * fB + x, df1)$fixeff$beta #> (Intercept)         fA2         fB2           x     fA2:fB2  #>           1           2           3           4           5"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"means-template","dir":"Articles","previous_headings":"Creating a design object > Parameter templates","what":"means Template","title":"pwr4exp: Power Analysis for Experimental Designs","text":"treatment factors, may convenient provide means instead beta. means template represents either marginal cell means factors, depending presence interactions. numerical variables included model, regression coefficients remain necessary alongside alongside means factors. Factors without interactions interactions present, marginal means factor level required. example, model ~ fA + fB, means reported order specified template: Interactions among factors factors interact, conditional (cell) means must provided possible combinations levels. example, model three interacting factors (fA, fB, fC), cell means required 12 level combinations following order: Numerical variables numerical variables, regression coefficients required. model includes numerical variables, intercept must also included. case, values means identical beta: numerical variables interact, regression coefficients main effects interaction terms must included. Factor--numerical interactions interactions factor numerical variables, Marginal means factor, Regression coefficients numerical variable level factor must provided. instance, model ~ fA * x, means levels fA regression coefficients x level fA must provided: Combining Multiple Situations rules outlined factor numerical variables apply multiple types variables interactions appear model. example, consider model including interactions among three factors (fA, fB, fC), factor--numerical interaction (fD * x), main effects another numerical variable (z). required elements order means : 1. Means level fD (positions 1–3) 2. Regression coefficient z (position 4) 3. Regression coefficients x level fD (positions 5–7) 4. Cell means combinations levels fA, fB, fC (positions 8–19)","code":"mkdesign(~ fA + fB, df1, template = TRUE)$fixeff$means #> fA1 fA2 fB1 fB2  #>   1   2   3   4 mkdesign(~ fA * fB * fC, df1)$fixeff$means #> fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2 fA2:fB1:fC2  #>           1           2           3           4           5           6  #> fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3 fA2:fB2:fC3  #>           7           8           9          10          11          12 mkdesign(~ x + z, df1)$fixeff$means #> (Intercept)           x           z  #>           1           2           3 mkdesign(~ x * z, df1)$fixeff$means #> (Intercept)           x           z         x:z  #>           1           2           3           4 mkdesign(~ fA * x, df1)$fixeff$means #>   fA1   fA2 fA1:x fA2:x  #>     1     2     3     4 mkdesign(~ fA * fB * fC + fD * x + z, df1)$fixeff$means #>         fD1         fD2         fD3           z       fD1:x       fD2:x  #>           1           2           3           4           5           6  #>       fD3:x fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2  #>           7           8           9          10          11          12  #> fA2:fB1:fC2 fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3  #>          13          14          15          16          17          18  #> fA2:fB2:fC3  #>          19"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"vcomp_template","dir":"Articles","previous_headings":"Creating a design object > Parameter templates","what":"vcomp Template","title":"pwr4exp: Power Analysis for Experimental Designs","text":"vcomp template represents variance-covariance matrices, integer values indicate order variance components input vector. single random effect, template unnecessary since corresponds single variance value. multiple random effects, template specifies sequence variance covariance components, ensuring proper alignment specifying variance components model. example, consider model includes random intercept random slope fA subject: template specifies following required inputs: Variance random intercept Covariance random intercept slop Variance random slop (fA2)","code":"mkdesign(~ fA * fB * fC * fD + (1 + fA | subject), df1)$varcov #> $subject #>             (Intercept) fA2 #> (Intercept)           1   2 #> fA2                   2   3"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"correlation-structures","dir":"Articles","previous_headings":"Creating a design object","what":"Correlation structures","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Although specifying complex variance-covariance structures, unstructured nlme::corSymm, may seem impractical power analysis, various correlation structures nlme package can applies. available correlation structures, outlined nlme::corClasses, including corAR1 – First-order autoregressive corARMA – Autoregressive moving average corCAR1 – Continuous-time autoregressive corCompSymm – Compound symmetry corExp – Exponential spatial correlation corGaus – Gaussian spatial correlation corLin – Linear spatial correlation corSymm – Unstructured correlation corRatio – Ratio-based spatial correlation corSpher – Spherical spatial correlation Note: nlme::corAR1() nlme::corARMA() p=1 q=0, time variable must integer. However, pwr4exp, restriction released, factors also supported.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power","dir":"Articles","previous_headings":"","what":"Power calculation","title":"pwr4exp: Power Analysis for Experimental Designs","text":"design object created, calculating statistical power straightforward.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation-for-omnibus-f-tests","dir":"Articles","previous_headings":"Power calculation","what":"Power Calculation for Omnibus F-Tests","title":"pwr4exp: Power Analysis for Experimental Designs","text":"statistical power F-tests (ANOVA-like tests) can computed using pwr.anova function. Usage Arguments object: design object created previous step. sig.level: significance level, default 0.05. type: type ANOVA table (default: 3).","code":"pwr.anova(object, sig.level = 0.05, type = 3)"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation-for-specific-contrasts","dir":"Articles","previous_headings":"Power calculation","what":"Power Calculation for Specific Contrasts","title":"pwr4exp: Power Analysis for Experimental Designs","text":"evaluate statistical power t-tests specific contrasts, use pwr.contrast function. Usage Arguments object: design object. : factor interest. Multiple factors can combined using : * (e.g., \"facA*facB\" treats combined factor levels single factor). : variable condition . contrast: Contrast method, \"pairwise\" - pairwise comparisons \"poly\" - polynomial contrasts \"trt.vs.ctrl\" - treatment vs. control comparison Alternatively, numeric vector single custom contrast, named list contrast vectors. list provided, vector must match number factor levels group. multi-factor scenarios, factor levels combined treated single factor. sig.level: significance level (default: 0.05). p.adj: whether sig.level adjusted using Bonferroni method (default: FALSE). alternative: \"two.sided\" (default) \"one.sided\". strict: Controls power calculated two-sided tests (default: TRUE). TRUE, includes probability rejection opposite direction true effect. FALSE, power equals half significance level true difference zero.","code":"pwr.contrast(object, which, by = NULL,    contrast = c(\"pairwise\", \"poly\", \"trt.vs.ctrl\"),   sig.level = 0.05, p.adj = FALSE,    alternative = c(\"two.sided\", \"one.sided\"), strict = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation-for-model-coefficients","dir":"Articles","previous_headings":"Power calculation","what":"Power Calculation for Model Coefficients","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr.summary function computes statistical power testing model coefficients (t-tests). Usage Arguments object: design object sig.level: significance level (default: 0.05)","code":"pwr.summary(object, sig.level = 0.05)"},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-1--completely-randomized-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 1. Completely Randomized Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create CRD one treatment factor. Design parameters Treatments: 1 treatment factor 4 levels. Replicates: 8 experimental units per treatment. Mean effect size: Expected means four levels: 35, 30, 37, 38 Error variance: 15 Step 1: Creating CRD Step 2: Power omnibus test compute power overall F-test (ANOVA): Step 3: Power specific contrasts ) Pairwise Comparisons compute power pairwise differences: b) Polynomial Contrasts test trends across treatment levels: c) Treatment vs. Control Comparison power detecting differences treatments control: d) Custom Contrast: Treatments vs. Control addition pre-defined contrast method, custom contrast vectors can specified. example, compare average treatments control, use contrast vector c(-1, 1/3, 1/3, 1/3). power test can computed : Adjusting Multiple Comparisons real-world analysis, P-values often need adjustment multiple comparisons (MCP). post-hoc methods applied directly power analysis, can lower significance level approximate MCP adjustments. Using Conservative Significance Level Using Bonferroni Correction pwr.contrast function includes option Bonferroni correction, though may overly conservative:","code":"crd <- designCRD(   treatments = 4,   replicates = 8,   means = c(35, 30, 37, 38),   sigma2 = 15 ) pwr.anova(crd) #> Power of type III F-test #>     NumDF DenDF sig.level   power #> trt     3    28      0.05 0.95467 pwr.contrast(crd, which =  \"trt\", contrast = \"pairwise\") #>             effect df sig.level      power alternative #> trt1 - trt2      5 28      0.05 0.70287390   two.sided #> trt1 - trt3     -2 28      0.05 0.16949749   two.sided #> trt1 - trt4     -3 28      0.05 0.32168033   two.sided #> trt2 - trt3     -7 28      0.05 0.93677955   two.sided #> trt2 - trt4     -8 28      0.05 0.97860686   two.sided #> trt3 - trt4     -1 28      0.05 0.07896844   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"poly\") #>           effect df sig.level     power alternative #> linear        16 28      0.05 0.7130735   two.sided #> quadratic      6 28      0.05 0.5617849   two.sided #> cubic        -18 28      0.05 0.8098383   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"trt.vs.ctrl\") #>             effect df sig.level     power alternative #> trt2 - trt1     -5 28      0.05 0.7028739   two.sided #> trt3 - trt1      2 28      0.05 0.1694975   two.sided #> trt4 - trt1      3 28      0.05 0.3216803   two.sided pwr.contrast(crd, which =  \"trt\", contrast = list(trts.vs.ctrl = c(-1, 1/3, 1/3, 1/3))) #>                    effect df sig.level power alternative #> trts.vs.ctrl 2.442491e-15 28      0.05  0.05   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"pairwise\", sig.level = 0.01) #>             effect df sig.level     power alternative #> trt1 - trt2      5 28      0.01 0.4418907   two.sided #> trt1 - trt3     -2 28      0.01 0.0546995   two.sided #> trt1 - trt4     -3 28      0.01 0.1320866   two.sided #> trt2 - trt3     -7 28      0.01 0.7946290   two.sided #> trt2 - trt4     -8 28      0.01 0.9042775   two.sided #> trt3 - trt4     -1 28      0.01 0.0194487   two.sided pwr.contrast(crd, which =  \"trt\", contrast = \"pairwise\", sig.level = 0.05, p.adj = TRUE) #>             effect df   sig.level      power alternative #> trt1 - trt2      5 28 0.008333333 0.41456682   two.sided #> trt1 - trt3     -2 28 0.008333333 0.04782486   two.sided #> trt1 - trt4     -3 28 0.008333333 0.11835238   two.sided #> trt2 - trt3     -7 28 0.008333333 0.77333066   two.sided #> trt2 - trt4     -8 28 0.008333333 0.89102508   two.sided #> trt3 - trt4     -1 28 0.008333333 0.01655798   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-2--randomized-complete-block-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 2. Randomized complete block design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create Randomized Complete Block Design (RCBD) two treatment factors 2×2 factorial design. Design Parameters Treatments: 2x2 factorial design (factors: B). Replicates: 8 blocks. Expected Means: B1B2A13538A24041     \\begin{array}{c|c|c}  & B1 & B2 \\\\     \\hline     A1 & 35 & 38 \\\\     A2 & 40  & 41 \\\\     \\end{array}      Corresponding beta values follows (Optional): Intercept (A1B1): 35 Effect A2 alone: 5 units Effect B2 alone: 3 units Interaction (A2:B2): -2 units (.e., combined effect A2 B2 2 units additive effects). Variance among blocks: 11. Error variance: 4. total variance response variable (15) decomposed variance blocks (11) variance within blocks (4). Step 1: Creating RCBD Generate templates determine correct parameter order. Provide beta means, vcomp according order . Create design object default factor names formula can inspected design object: Treatment factors factor levels can renamed relabeled, model formula can changed. example, interactions removed, marginal means factors must provided instead cell means. Step 2: Evaluate statistical power test overall effects facA facB test differences levels facA, conditioned facB:","code":"designRCBD(treatments = c(2, 2), blocks = 8, template = TRUE) #> $fixeff #> $fixeff$beta #> (Intercept)       facA2       facB2 facA2:facB2  #>           1           2           3           4  #>  #> $fixeff$means #> facA1:facB1 facA2:facB1 facA1:facB2 facA2:facB2  #>           1           2           3           4  #>  #>  #> $varcov #> $varcov$block #>             (Intercept) #> (Intercept)           1 rcbd <- designRCBD(   treatments = c(2, 2),   blocks = 8,   # beta = c(35, 5, 3, -2), # identical to means   means = c(35, 40, 38, 41),   vcomp = 11,   sigma2 = 4 ) unique(rcbd$deStruct$fxTrms$fixedfr) #>   facA facB #> 1    1    1 #> 2    2    1 #> 3    1    2 #> 4    2    2 rcbd$deStruct$formula #> ~facA * facB + (1 | block) #> <environment: 0x562924fcaf38> designRCBD(treatments = c(2, 2),             label = list(factorA = c(\"A1\", \"A2\"), factorB = c(\"B1\", \"B2\")),             blocks = 8,             formula = ~ factorA + factorB + (1|block),             template = TRUE) #> $fixeff #> $fixeff$beta #> (Intercept)   factorAA2   factorBB2  #>           1           2           3  #>  #> $fixeff$means #> factorAA1 factorAA2 factorBB1 factorBB2  #>         1         2         3         4  #>  #>  #> $varcov #> $varcov$block #>             (Intercept) #> (Intercept)           1 pwr.anova(rcbd) #> Power of type III F-test #>           NumDF DenDF sig.level   power #> facA          1    21      0.05 0.99969 #> facB          1    21      0.05 0.76950 #> facA:facB     1    21      0.05 0.27138 pwr.contrast(rcbd, which = \"facA\", by = \"facB\") #> $`facB = 1` #>               effect df sig.level     power alternative #> facA1 - facA2     -5 21      0.05 0.9974502   two.sided #>  #> $`facB = 2` #>               effect df sig.level     power alternative #> facA1 - facA2     -3 21      0.05 0.8160596   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-3--latin-square-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 3. Latin square design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, extend Example 2 introducing another blocking factor, transforming design LSD. treatment structure effect sizes remain Example 2. LSD controls two sources variability (row column blocks) evaluating treatment effects. total variance (15) decomposed : Variance row blocks: 11 Variance column blocks: 2 Residual error variance: 2 Step 1: Creating LSD Generate templates determine correct order inputs. Either beta means can provided, Example 2. Note although variance component template sets order row col variances vcomp, values don’t impact power long sigma2 fixed treatment effects tested residual error. However, designs error terms treatment factors include variance components beyond residual error (like next example), variance components can affect power main plot factors. ’s also recommended use variance components guide make informed estimate sigma2. Create LSD design created, pwr.anova pwr.contrast can used evaluate statistical power demonstrated .","code":"designLSD(   treatments = c(2, 2),   squares = 4,   reuse = \"both\",   template = TRUE ) #> $fixeff #> $fixeff$beta #> (Intercept)       facA2       facB2 facA2:facB2  #>           1           2           3           4  #>  #> $fixeff$means #> facA1:facB1 facA2:facB1 facA1:facB2 facA2:facB2  #>           1           2           3           4  #>  #>  #> $varcov #> $varcov$row #>             (Intercept) #> (Intercept)           1 #>  #> $varcov$col #>             (Intercept) #> (Intercept)           2 lsd <- designLSD(   treatments = c(2, 2),   label = list(temp = c(\"T1\", \"T2\"), dosage = c(\"D1\", \"D2\")),   squares = 4,   reuse = \"both\",   means = c(35, 40, 38, 41),   vcomp = c(11, 2),   sigma2 = 2 )"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-4-split-plot-design","dir":"Articles","previous_headings":"Practical Examples","what":"Example 4: Split-plot Design","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example, create SPD two treatment factors, one main plot level another subplot level. design parameters follows: Treatments: Main plot factor 2 levels Subplot factor 3 levels Replicates: main plot treatment 5 plots, total 10 plots. standard SPD, plots blocks subplot level subplot design follows RCBD structure. Expected cell means : trt.sub1trt.sub2trt.sub3trt.main1202224trt.main2222428     \\begin{array}{c|c|c}       & trt.sub1 & trt.sub2 & trt.sub3 \\\\     \\hline     trt.main1 & 20 & 22 & 24\\\\     trt.main2 & 22 & 24 & 28 \\\\     \\end{array} Variance Components: Main-plot error: 4 Subplot (residual) error: 11 Total variance: 15 Generate input templates Create SPD One can verify different values main-plot error (vcomp) affect power main plot factor, unlike Example 3, variance components influence power.","code":"designSPD(   trt.main = 2,   trt.sub = 3,    replicates = 10,    template = TRUE ) #> $fixeff #> $fixeff$beta #>        (Intercept)          trt.main2           trt.sub2           trt.sub3  #>                  1                  2                  3                  4  #> trt.main2:trt.sub2 trt.main2:trt.sub3  #>                  5                  6  #>  #> $fixeff$means #> trt.main1:trt.sub1 trt.main2:trt.sub1 trt.main1:trt.sub2 trt.main2:trt.sub2  #>                  1                  2                  3                  4  #> trt.main1:trt.sub3 trt.main2:trt.sub3  #>                  5                  6  #>  #>  #> $varcov #> $varcov$mainplot #>             (Intercept) #> (Intercept)           1 spd <- designSPD(   trt.main = 2,   trt.sub = 3,    replicates = 10,    means = c(20, 22, 22, 24, 24, 28),   vcomp = 4,   sigma2 = 11 )"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"example-5-repeated-measures","dir":"Articles","previous_headings":"Practical Examples","what":"Example 5: Repeated measures","title":"pwr4exp: Power Analysis for Experimental Designs","text":"example illustrates repeated measures design, three treatments (CON, TRT1, TRT2) measured hourly 8 hours. Within-subject correlations modeled using AR(1) structure ρ=0.6\\rho = 0.6 σ2=2\\sigma^2 = 2. Design Details 1. Subjects: 6 per treatment group (total: 18 subjects). 2. Treatments: CON, TRT1, TRT2. 3. Time Points: 8 hourly measurements. 4. Means:𝐓𝐫𝐞𝐚𝐭𝐦𝐞𝐧𝐭𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖CON1.001.001.001.001.001.001.001.00TRT12.503.503.984.033.683.353.022.94TRT23.504.545.805.845.494.714.083.78 \\begin{array}{c|cccccccc} \\textbf{Treatment} & \\textbf{1} & \\textbf{2} & \\textbf{3} & \\textbf{4} & \\textbf{5} & \\textbf{6} & \\textbf{7} & \\textbf{8} \\\\ \\hline \\text{CON} & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 \\\\ \\text{TRT1} & 2.50 & 3.50 & 3.98 & 4.03 & 3.68 & 3.35 & 3.02 & 2.94 \\\\ \\text{TRT2} & 3.50 & 4.54 & 5.80 & 5.84 & 5.49 & 4.71 & 4.08 & 3.78 \\\\ \\end{array} Step 1: Creating design Create data frame design Input templates Either values beta means required following order: Create design Step 2: Power calculation Statistical power main effects treatment time, interaction: Statistical power treatment differences time point: shown Example 5, design can created using mkdesign function long appropriate data frame provided. However, package currently support non-normal response variables.","code":"n_subject = 6 # Subjects per treatment n_trt = 3 # Number of treatments n_hour = 8 # Number of repeated measures (time points) trt = c(\"CON\", \"TRT1\", \"TRT2\")  df.rep <- data.frame(   subject = as.factor(rep(seq_len(n_trt*n_subject), each = n_hour)),   hour = as.factor(rep(seq_len(n_hour), n_subject*n_trt)),   trt = rep(trt, each = n_subject*n_hour) ) mkdesign(formula = ~ trt*hour, data = df.rep) #> $fixeff #> $fixeff$beta #>   (Intercept)       trtTRT1       trtTRT2         hour2         hour3  #>             1             2             3             4             5  #>         hour4         hour5         hour6         hour7         hour8  #>             6             7             8             9            10  #> trtTRT1:hour2 trtTRT2:hour2 trtTRT1:hour3 trtTRT2:hour3 trtTRT1:hour4  #>            11            12            13            14            15  #> trtTRT2:hour4 trtTRT1:hour5 trtTRT2:hour5 trtTRT1:hour6 trtTRT2:hour6  #>            16            17            18            19            20  #> trtTRT1:hour7 trtTRT2:hour7 trtTRT1:hour8 trtTRT2:hour8  #>            21            22            23            24  #>  #> $fixeff$means #>  trtCON:hour1 trtTRT1:hour1 trtTRT2:hour1  trtCON:hour2 trtTRT1:hour2  #>             1             2             3             4             5  #> trtTRT2:hour2  trtCON:hour3 trtTRT1:hour3 trtTRT2:hour3  trtCON:hour4  #>             6             7             8             9            10  #> trtTRT1:hour4 trtTRT2:hour4  trtCON:hour5 trtTRT1:hour5 trtTRT2:hour5  #>            11            12            13            14            15  #>  trtCON:hour6 trtTRT1:hour6 trtTRT2:hour6  trtCON:hour7 trtTRT1:hour7  #>            16            17            18            19            20  #> trtTRT2:hour7  trtCON:hour8 trtTRT1:hour8 trtTRT2:hour8  #>            21            22            23            24  #>  #>  #> $varcov #> NULL design.rep <- mkdesign( formula = ~ trt*hour, data = df.rep, means =  c(1, 2.50, 3.5,            1, 3.50, 4.54,            1, 3.98, 5.80,            1, 4.03, 5.4,            1, 3.68, 5.49,            1, 3.35, 4.71,            1, 3.02, 4.08,            1, 2.94, 3.78), sigma2 = 2, correlation = corAR1(value = 0.6, form = ~ hour|subject) ) pwr.anova(design.rep) #> Power of type III F-test #>          NumDF  DenDF sig.level   power #> trt          2 21.563      0.05 1.00000 #> hour         7 86.055      0.05 0.74687 #> trt:hour    14 86.055      0.05 0.38500 pwr.contrast(design.rep, which = \"trt\", by = \"hour\", contrast = \"trt.vs.ctrl\", p.adj = TRUE)[1:2] #> $`hour = 1` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON    1.5 64.41176     0.025 0.3299823   two.sided #> trtTRT2 - trtCON    2.5 64.41176     0.025 0.7765112   two.sided #>  #> $`hour = 2` #>                  effect       df sig.level     power alternative #> trtTRT1 - trtCON   2.50 64.41176     0.025 0.7765112   two.sided #> trtTRT2 - trtCON   3.54 64.41176     0.025 0.9777118   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"fundamental-concepts","dir":"Articles","previous_headings":"","what":"Fundamental concepts","title":"pwr4exp: Power Analysis for Experimental Designs","text":"pwr4exp developed based LMM theory. general form LMM can expressed : y=Xβ+Zu+ε y = X\\beta + Zu + \\varepsilon : yy represents observations response variable, β\\beta represents fixed effect coefficients, uu denotes random effects, u∼Nq(0,G)u \\sim N_q(0, G), ε\\varepsilon represents random errors, ε∼Nn(0,R)\\varepsilon \\sim N_n(0, R), X(n×p)X_{(n \\times p)} Z(n×q)Z_{(n \\times q)} design matrices fixed random effects, respectively. assumed uu ε\\varepsilon independent, marginal distribution yy follows normal distribution y∼Nn(Xβ,V)y \\sim N_n(X\\beta, V), : V=ZGZT+R V = ZGZ^T + R","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"inference-on-treatment-effects","dir":"Articles","previous_headings":"Fundamental concepts","what":"Inference on Treatment Effects","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Inference treatment effects often involves testing omnibus hypotheses contrasts. can formulated using general linear hypothesis: H0:Kβ=0 H_0: K\\beta = 0 KK contrast matrix. variance-covariance parameters GG RR known, estimate β\\beta : β̂=(XTV−1X)−1XTV−1y \\hat{\\beta} = (X^TV^{-1}X)^{-1}X^TV^{-1}y variance : C=(XTV−1X)−1 C = (X^TV^{-1}X)^{-1} sampling distribution K′β̂K'\\hat{\\beta} : K′β̂∼N(0,K′CK) K'\\hat{\\beta} \\sim N(0, K'CK) However, practical situations, matrices GG RR unknown must estimated using methods like Maximum Likelihood (ML) Restricted ML (REML). estimate β\\beta obtained plugging estimated covariance matrices V̂\\hat{V}, : V̂=ZĜZT+R̂ \\hat{V} = Z\\hat{G}Z^T + \\hat{R} resulting estimate β\\beta : β̂=(XTV̂−1X)−1XTV̂−1y \\hat{\\beta} = (X^T\\hat{V}^{-1}X)^{-1}X^T\\hat{V}^{-1}y estimated variance : Ĉ=(XTV̂−1X)−1 \\hat{C} = (X^T\\hat{V}^{-1}X)^{-1} testing null hypothesis H0:Kβ=0H_0: K\\beta = 0, approximate F-statistic used. F-statistic given : F=(Kβ̂)T[KĈKT]−1(Kβ̂)v1 F = \\frac{(K\\hat{\\beta})^T [K\\hat{C}K^T]^{-1} (K\\hat{\\beta})}{v_1} FF follows approximate F-distribution F(v1,v2)F(v_1, v_2) H0H_0, v1=rank(K)≥1v_1 = \\text{rank}(K) \\geq 1 represents numerator degrees freedom (df), v2v_2 denominator df. rank(K)=1\\text{rank}(K) = 1, F-statistic simplifies square t-statistic: F=t2 F = t^2 t=k′β̂k′ĈKt = \\frac{k'\\hat{\\beta}}{\\sqrt{k'\\hat{C}K}} v2v_2 df. balanced designs, data analyzed using variance components model, commonly applied experimental animal research, v2v_2​ can precisely determined degrees freedom decomposition, applied analysis variance (ANOVA). However, general cases, v2v_2 must approximated using methods. Satterthwaite approximation (Satterthwaite, 1946) DF t-tests can calculated outlined Giesbrecht Burns (1985): v2=2(kTĈk)2gTAg v_2 = \\frac{2(k^T \\hat{C} k)^2}{g^T g} : gg gradient kTC(θ̂)kk^T C(\\hat{\\theta}) k respect θ\\theta, variance-covariance parameters VV, evaluated θ̂\\hat{\\theta}. Matrix AA asymptotic variance-covariance matrix θ̂\\hat{\\theta}, obtained information matrix ML REML estimation θ̂\\hat{\\theta} (Stroup, 2012). F-tests, v2v_2 can calculated following procedures described Fai Cornelius (1996). First, KCK̂TKC\\hat{K}^T decomposed yield KCK̂T=PTDPKC\\hat{K}^T = P^T D P, PP orthogonal matrix eigen vectors, DD diagonal matrix eigenvalues. Define kmCkmTk_m Ck_m^T, kmk_m mm-th row PKP K, let: vm=2(Dm)2gmTAgm v_m = \\frac{2(D_m)^2}{g_m^T g_m} : DmD_mis mmth diagonal element DD, gmg_m gradient kmCkmTk_m C k_m^T respect θ\\theta, evaluated θ̂\\hat{\\theta}. let: E=∑m=1v1vmvm−2I(vm>2) E = \\sum_{m=1}^{v_1} \\frac{v_m}{v_m - 2} (v_m > 2) (vm>2)(v_m > 2) denotes indicator function. denominator DF v2v_2 calculated : v2=2EE−v1 v_2 = \\frac{2E}{E - v_1}  Satterthwaite approximation can applied power analysis plugging assumed values variance parameters (Stroup, 2002).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"power-calculation-under-the-alternative-hypothesis","dir":"Articles","previous_headings":"Fundamental concepts","what":"Power Calculation Under the Alternative Hypothesis","title":"pwr4exp: Power Analysis for Experimental Designs","text":"alternative hypothesis HA:K′β≠0H_A: K'\\beta \\neq 0, F-statistic follows non-central distribution F(v1,v2,ϕ)F(v_1, v_2, \\phi), ϕ\\phi non-centrality parameter measures departure null hypothesis H0H_0. non-centrality parameter ϕ\\phi given : ϕ=(Kβ̂)T[KĈKT]−1(Kβ̂) \\phi = (K\\hat{\\beta})^T [K\\hat{C}K^T]^{-1} (K\\hat{\\beta}) distribution F-statistic HAH_A known, power test can calculated conditional probability rejecting H0H_0 HAH_A true: Power=P(reject H0:F>Fcrit∣HA) \\text{Power} = P(\\text{reject } H_0: F > F_{\\text{crit}} \\mid H_A) : FcritF_{\\text{crit}} critical value F-statistic used reject H0H_0, determined P(F>Fcrit∣H0)=αP(F > F_{\\text{crit}} \\mid H_0) = \\alpha, α\\alpha type error rate. determination degrees freedom v1v_1 v2v_2, well non-centrality parameter ϕ\\phi, critical steps power calculation. Generally, power analysis requires specifying following components: Design evaluated, determines matrices XX (fixed effects) ZZ (random effects). Treatment Effects, determine β\\beta (fixed effect coefficients). Variance Components, determine GG (covariance matrix random effects) RR (covariance matrix residuals). key aspect conducting valid power analysis obtaining reasonable estimates magnitude parameters used model. includes: Treatment Effects (β\\beta): size treatment effect(s) expect detect. can obtained previous studies, pilot experiments, subject-matter expertise. Pilot studies preliminary data, can provide initial estimates variability random effects (e.g., subject--subject variability group-level variability). Literature similar experiments, variance components reported. Subject-matter expertise, researchers provide estimates based knowledge system studied. Performing power analysis unrealistic parameter magnitudes can lead incorrect conclusions, either overestimating likelihood detecting treatment effect requiring unnecessarily large sample size.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/articles/pwr4exp.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"pwr4exp: Power Analysis for Experimental Designs","text":"Fai, . H., & Cornelius, P. L. (1996). Approximate F-tests multiple degree freedom hypotheses generalized least squares analyses unbalanced split-plot experiments. Journal Statistical Computation Simulation, 54(4), 363–378. Giesbrecht, F. G., & Burns, J. C. (1985). Two-stage analysis based mixed model: Large-sample asymptotic theory small-sample simulation results. Biometrics, 41(2), 477–486. Satterthwaite, F. E. (1946). approximate distribution estimates variance components. Biometrics Bulletin, 2(6), 110–114. Stroup, W. W. (2002). Power analysis based spatial effects mixed models: tool comparing design analysis strategies presence spatial variability. Journal Agricultural, Biological, Environmental Statistics, 7(4), 491–511. Stroup, W. W. (2012). Generalized linear mixed models: Modern concepts, methods, applications (1st ed.). CRC Press.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Wang. Author, maintainer, copyright holder. Mutian Niu. Author, copyright holder.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang K, Arshad U, Niu M (2024). “Enhancing quality dairy cattle research adequate power analysis.” agriRxiv. doi:10.31220/agriRxiv.2024.00278, Preprint.","code":"@Article{,   title = {Enhancing quality of dairy cattle research through adequate power analysis},   author = {Kai Wang and Usman Arshad and Mutian Niu},   journal = {agriRxiv},   year = {2024},   doi = {10.31220/agriRxiv.2024.00278},   publisher = {CABI},   note = {Preprint}, }"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwr4exp","dir":"","previous_headings":"","what":"Power Analysis for Research Experiments","title":"Power Analysis for Research Experiments","text":"pwr4exp supports statistical power calculations diverse experimental designs analyzed using linear mixed models. provides approximate F-tests omnibus hypothesis tests t-tests specific contrasts, employing Satterthwaite method approximating degrees freedom. Various correlation structures (R-side) defined nlme package can used model residuals.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Research Experiments","text":"","code":"# You can install pwr4exp from CRAN install.packages(\"pwr4exp\")  # Or the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"an-ethz/pwr4exp\") # Load the library library(pwr4exp)"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Power Analysis for Research Experiments","text":"Performing power analysis pwr4exp involves two main steps:","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"the-mkdesign-function","dir":"","previous_headings":"Functions > Step 1. Define the design","what":"The mkdesign function","title":"Power Analysis for Research Experiments","text":"mkdesign flexible function defining experimental design based data structure, statistical model, treatment effects, variance-covariance components. example, following code defines completely randomized design repeated measures: pwr4exp also provides functions common standard designs, allowing design defined specifying key characteristics like treatment structure replications, without manually creating data frame.","code":"# Create a data frame reflecting the data structure n_trt = 3 # Number of treatments trt = c(\"CON\", \"TRT1\", \"TRT2\") n_subject = 6 # Number of subjects per treatment n_hour = 8 # Number of repeated measures (time points)  df.rep <- data.frame(   subject = as.factor(rep(seq_len(n_trt*n_subject), each = n_hour)),   hour = as.factor(rep(seq_len(n_hour), n_subject*n_trt)),   trt = rep(trt, each = n_subject*n_hour) )  # Create the design object crd.rep <- mkdesign(   formula = ~ trt*hour, # model   data = df.rep, # a data frame reflecting the data structure   # treatment means at each hour reflecting effects   means =  c(1, 2.50, 3.5,              1, 3.50, 4.54,              1, 3.98, 5.80,              1, 4.03, 5.4,              1, 3.68, 5.49,              1, 3.35, 4.71,              1, 3.02, 4.08,              1, 2.94, 3.78),    sigma2 = 2, # residual variance   # residual correlation structure, AR1   correlation = corAR1(value = 0.6, form = ~ hour|subject)  ) # Create a completely randomized design crd <- designCRD(   treatments = 4, # one treatment factor with 4 levels   replicates = 12, # 12 experimental units per treatment   means = c(30, 28, 33, 35), # treatment means   sigma2 = 10 # error variance )  # Create a randomized complete block design rcbd <- designRCBD(   # two factors, each with 2 levels (2x2 factorial)   treatments = c(2, 2),    blocks = 10, # 10 blocks   means = c(30, 28, 33, 35), # treatment means (cell means)   vcomp = 6, # block variance   sigma2 = 4 # error variance )  # Create a Latin Square design lsd <- designLSD(   # two factors, with 2 and 3 levels, respectively (2x3 factorial)   treatments = c(2, 3),    squares = 4, # four squares   reuse = \"col\", # column blocks are identical acorss squares   means = c(30, 28, 33, 35, 34, 35), # treatment means (cell means)   vcomp = c(5, 2), # variances of blocking factor (row and column)   sigma2 = 3 # error variance )  # Create a split-plot design spd <- designSPD(   trt.main = 2, # one factor with two levels at main plot   trt.sub = 2, # one factor with two levels at subplot   # 10 units per main plot factor (blocks at subplot level)   replicates = 10,    means = c(30, 28, 33, 35), # treatment means (cell means)   vcomp = 7, # main plot error   sigma2 = 3 # residual error (subplot error) )  # If not specified, these functions internally use a default model formula that includes main effects and all interactions, with block factors fitted as random effects."},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"step-2-calculate-power","dir":"","previous_headings":"Functions","what":"Step 2. Calculate power","title":"Power Analysis for Research Experiments","text":"design correctly defined, design object can passed power calculation functions, including:","code":""},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwranova","dir":"","previous_headings":"Functions > Step 2. Calculate power","what":"pwr.anova","title":"Power Analysis for Research Experiments","text":"Computes power F-tests omnibus hypotheses.","code":"pwr.anova(crd.rep)"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"pwrcontrast","dir":"","previous_headings":"Functions > Step 2. Calculate power","what":"pwr.contrast","title":"Power Analysis for Research Experiments","text":"Computes power t-tests specific contrasts.","code":"pwr.contrast(crd.rep, which = \"trt\", by = \"hour\", contrast = \"trt.vs.ctrl\")"},{"path":"https://an-ethz.github.io/pwr4exp/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Power Analysis for Research Experiments","text":"learn power analysis pwr4exp, refer vignette contains: Instructions preparing providing required inputs. Examples power calculations standard designs available package. Examples power analysis customized designs. Fundamental concepts statistical power linear mixed models. questions suggestions, please open issue GitHub repository contact package maintainer.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrast1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes power of t-test for one-dimensional contrast matrices — contrast1D","title":"Computes power of t-test for one-dimensional contrast matrices — contrast1D","text":"Computes power t-test one-dimensional contrast matrices","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrast1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes power of t-test for one-dimensional contrast matrices — contrast1D","text":"","code":"contrast1D(   object,   L,   method = c(\"Satterthwaite\"),   sig.level = 0.05,   alternative = c(\"two.sided\", \"one.sided\"),   strict = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrast1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes power of t-test for one-dimensional contrast matrices — contrast1D","text":"object design object L contrast vector method DF approximation method, \"Satterthwaite\" available currently sig.level significance level, default 0.05 alternative one- two-sided test strict whether use strict interpretation two-sided case","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrast1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes power of t-test for one-dimensional contrast matrices — contrast1D","text":"data frame columns effect size, degrees freedom, significance level, power, test type.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrastMD.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes power of F-test for multi-dimensional contrast matrices — contrastMD","title":"Computes power of F-test for multi-dimensional contrast matrices — contrastMD","text":"Computes power F-test multi-dimensional contrast matrices","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrastMD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes power of F-test for multi-dimensional contrast matrices — contrastMD","text":"","code":"contrastMD(object, L, sig.level = 0.05, eps = sqrt(.Machine$double.eps))"},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrastMD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes power of F-test for multi-dimensional contrast matrices — contrastMD","text":"object design object L contrast matrix sig.level significance level eps numeric tolerance","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/contrastMD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes power of F-test for multi-dimensional contrast matrices — contrastMD","text":"data frame","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Standard Experimental Designs — designCRD","title":"Creation of Standard Experimental Designs — designCRD","text":"functions facilitate creation standard experimental designs commonly used agricultural studies power analysis. Unlike mkdesign requires pre-existing data frame, functions allow users directly specify key design characteristics generate experimental layouts. Quantitative parameters describing fixed random effects remain consistent mkdesign.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Standard Experimental Designs — designCRD","text":"","code":"designCRD(   treatments,   label,   replicates,   formula,   beta = NULL,   means = NULL,   sigma2,   template = FALSE,   REML = TRUE )  designRCBD(   treatments,   label,   blocks,   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )  designLSD(   treatments,   label,   squares = 1,   reuse = c(\"row\", \"col\", \"both\"),   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )  designCOD(   treatments,   label,   squares = 1,   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )  designSPD(   trt.main,   trt.sub,   label,   replicates,   formula,   beta = NULL,   means = NULL,   vcomp,   sigma2,   template = FALSE,   REML = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Standard Experimental Designs — designCRD","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. replicates number experimental units per treatment completely randomized design number experimental units (main plots) per treatment main plot factors. formula right-hand-side formula specifying model testing treatment effects, terms right ~ , following lme4::lmer syntax random effects. specified, default formula main effects interactions used internally. beta One optional inputs fixed effects. vector model coefficients factor variable coefficients correspond dummy variables created using treatment contrast (stats::contr.treatment). means One optional inputs fixed effects. vector marginal conditioned means (factors interactions). Regression coefficients required numerical variables. Either beta means must provided, values must strictly follow specific order. template can created indicate required input values order. See mkdesign information. sigma2 error variance. template Default FALSE. TRUE, template beta, means, vcomp generated indicate required input order. REML Specifies whether use REML ML information matrix. Default TRUE (REML). blocks number blocks. vcomp vector variance-covariance components random effects, present. values must follow strict order. See mkdesign. squares number replicated squares. default, 1, .e., replicated squares. reuse character string specifying replicate squares multiple squares. Options : \"row\" reusing row blocks, \"col\" reusing column blocks, \"\" reusing row column blocks replicate single square. trt.main integer-valued vector specifying treatment structure main plot level split plot design, similar treatments. trt.sub integer-valued vector specifying treatment structure sub plot level split plot design, similar treatments.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of Standard Experimental Designs — designCRD","text":"list object containing essential components power calculation. includes: Structural components (deStruct): including data frame, design matrices fixed random effects, variance-covariance matrices random effects residuals, etc. Internally calculated higher-level parameters (deParam), including variance-covariance matrix beta coefficients (vcov_beta), variance-covariance matrix variance parameters (vcov_varpar), gradient matrices (Jac_list), etc.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of Standard Experimental Designs — designCRD","text":"function creates standard design described : designCRD Completely Randomized Design. default, model formula ~ trt one factor ~ facA*facB two factors, unless explicitly specified. label argument provided, formula automatically updated specified treatment factor names. designRCBD Randomized Complete Block Design. Experimental units grouped blocks, treatment appearing exactly per block (.e., replicates per treatment within block). default model formula ~ trt + (1|block) one factor ~ facA*facB + (1|block) two factors. label provided, fixed effect parts formula automatically updated specified names. block factor named \"block\" changeable. designLSD Latin Square Design. default formula ~ trt + (1|row) + (1|col) one factor ~ facA*facB + (1|row) + (1|col) two factors. label provided, fixed effect parts formula automatically updated specified names. names row (\"row\") column (\"col\") block factors changeable. designCOD Crossover Design, special case LSD time periods individuals blocks. Period blocks reused replicating squares. default formula ~ trt + (1|subject) + (1|period) one factor ~ facA*facB + (1|subject) + (1|period) two factors. label provided, fixed effect parts formula automatically updated specified names. Note \"subject\" \"period\" names two blocking factors changed. designSPD Split Plot Design. default formula includes main effects treatment factors main sub-plot levels, interactions, random effects main plots: ~ . + (1|mainplot). label provided, fixed effect parts formula automatically updated specified names. experimental unit main plot level (.e., block factor subplot level) always named \"mainplot\".","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/create_designs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Standard Experimental Designs — designCRD","text":"","code":"# Evaluate the power of a CRD with one treatment factor ## Create a design object crd <- designCRD(   treatments = 4, # 4 levels of one treatment factor   replicates = 12, # 12 units per level, 48 units totally   means = c(30, 28, 33, 35), # means of the 4 levels   sigma2 = 10 # error variance )  ## power of omnibus test pwr.anova(crd) #> Power of type III F-test #>     NumDF DenDF sig.level power #> trt     3    44      0.05 0.999  ## power of contrast pwr.contrast(crd, which = \"trt\", contrast = \"pairwise\") # pairwise comparisons #>             effect df sig.level     power alternative #> trt1 - trt2      2 44      0.05 0.3285822   two.sided #> trt1 - trt3     -3 44      0.05 0.6228308   two.sided #> trt1 - trt4     -5 44      0.05 0.9661638   two.sided #> trt2 - trt3     -5 44      0.05 0.9661638   two.sided #> trt2 - trt4     -7 44      0.05 0.9995822   two.sided #> trt3 - trt4     -2 44      0.05 0.3285822   two.sided pwr.contrast(crd, which = \"trt\", contrast = \"poly\") # polynomial contrasts #>           effect df sig.level     power alternative #> linear        20 44      0.05 0.9976700   two.sided #> quadratic      4 44      0.05 0.5726028   two.sided #> cubic        -10 44      0.05 0.6685119   two.sided  # More examples are available in `vignette(\"pwr4exp\")` # and on https://an-ethz.github.io/pwr4exp/"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Crossover design — df.cod","title":"Create a data frame for Crossover design — df.cod","text":"Create data frame Crossover design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Crossover design — df.cod","text":"","code":"df.cod(treatments, label, squares)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Crossover design — df.cod","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. squares number replicated squares. default, 1, .e., replicated squares.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.cod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Crossover design — df.cod","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of completely randomized design — df.crd","title":"Create a data frame of completely randomized design — df.crd","text":"Create data frame completely randomized design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of completely randomized design — df.crd","text":"","code":"df.crd(treatments, label, replicates)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of completely randomized design — df.crd","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)) Label sets arranged main plot factors come first, followed subplot factors. replicates number experimental units per treatment.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.crd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of completely randomized design — df.crd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame for Latin square design — df.lsd","title":"Create a data frame for Latin square design — df.lsd","text":"Create data frame Latin square design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame for Latin square design — df.lsd","text":"","code":"df.lsd(treatments, label, squares = 1, reuse = c(\"row\", \"col\", \"both\"))"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame for Latin square design — df.lsd","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. squares number replicated squares reuse character string specifying replicate squares multiple squares. Options : \"row\" reusing row blocks, \"col\" reusing column blocks, \"\" reusing row column blocks replicate single square.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.lsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame for Latin square design — df.lsd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of randomized complete block design — df.rcbd","title":"Create a data frame of randomized complete block design — df.rcbd","text":"Create data frame randomized complete block design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of randomized complete block design — df.rcbd","text":"","code":"df.rcbd(treatments, label, blocks)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of randomized complete block design — df.rcbd","text":"treatments integer vector element represents number levels corresponding treatment factor. single integer (e.g., treatments = n) specifies one treatment factor n levels. multiple factors provided, arranged factorial treatment factor design. example, treatments = c(2, 3) creates 2x3 factorial design first factor 2 levels second factor 3 levels. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. blocks number blocks","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.rcbd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of randomized complete block design — df.rcbd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame for split-plot design — df.spd","title":"Create data frame for split-plot design — df.spd","text":"Create data frame split-plot design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame for split-plot design — df.spd","text":"","code":"df.spd(trt.main, trt.sub, label, replicates)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame for split-plot design — df.spd","text":"trt.main integer-valued vector specifying treatment structure main plot level, similar df.crd. trt.sub integer-valued vector specifying treatment structure sub plot level, similar trt.main. label Optional. list character vectors, corresponding treatment factor. name vector specifies factor's name, elements provide labels factor's levels. labels provided, default labels used. single treatment factor, default list(trt = c(\"1\", \"2\", ...)), two treatment factors, default list(facA = c(\"1\", \"2\", ...), facB = c(\"1\", \"2\", ...)). split-plot designs, defaults similar include \".main\" \".sub\" suffixes main plot subplot factors. example: list(trt.main = c(\"1\", \"2\", ...), trt.sub = c(\"1\", \"2\", ...)) list(facA.main = c(\"1\", \"2\", ...), facB.main = c(\"1\", \"2\", ...),       facA.sub = c(\"1\", \"2\", ...), facB.sub = c(\"1\", \"2\", ...)). Label sets arranged main plot factors come first, followed subplot factors. replicates number experimental units (main plots) per treatment main plot factors.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/df.spd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame for split-plot design — df.spd","text":"data.frame representing data structure design","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/expandDoubleVerts.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand terms with '||' notation into separate '|' terms — expandDoubleVerts","title":"Expand terms with '||' notation into separate '|' terms — expandDoubleVerts","text":"Expand terms '||' notation separate '|' terms","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/expandDoubleVerts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand terms with '||' notation into separate '|' terms — expandDoubleVerts","text":"","code":"expandDoubleVerts(term)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/expandDoubleVerts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand terms with '||' notation into separate '|' terms — expandDoubleVerts","text":"term formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/expandDoubleVerts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand terms with '||' notation into separate '|' terms — expandDoubleVerts","text":"modified term","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/factorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert variables to factors as necessary — factorize","title":"Convert variables to factors as necessary — factorize","text":"Convert variables factors necessary","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/factorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert variables to factors as necessary — factorize","text":"","code":"factorize(x, frloc, char.only = FALSE)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/factorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert variables to factors as necessary — factorize","text":"x formula frloc data frame char.(logical) convert character variables factors?","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/factorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert variables to factors as necessary — factorize","text":"copy data frame factors converted","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/findbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine random-effects expressions from a formula — findbars","title":"Determine random-effects expressions from a formula — findbars","text":"Determine random-effects expressions formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/findbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine random-effects expressions from a formula — findbars","text":"","code":"findbars(term)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/findbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine random-effects expressions from a formula — findbars","text":"term mixed-model formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/findbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine random-effects expressions from a formula — findbars","text":"pairs expressions separated vertical bars","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/findbars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine random-effects expressions from a formula — findbars","text":"function called recursively individual terms model, argument called term name like form, indicating formula.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":null,"dir":"Reference","previous_headings":"","what":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"Milk yield records 8 cows 4 different periods 4x4 crossover design. design includes 2 Latin squares, consisting 4 cows 4 periods.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"","code":"milk"},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"data frame 32 rows 4 variables: Cow Factor: Cow index (8 levels) Period Factor: Period index (4 levels) Treatment Factor: Treatment index (4 levels) MilkYield Numeric: milk yield recordings (kg)","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/milk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An exemplary dataset of a 4x4 crossover design with 2 squares — milk","text":"Simulated data package demonstration purposes.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkRTrms.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual Variance-Covariance Matrices — mkRTrms","title":"Residual Variance-Covariance Matrices — mkRTrms","text":"Residual Variance-Covariance Matrices","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkRTrms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residual Variance-Covariance Matrices — mkRTrms","text":"","code":"mkRTrms(data, corcall = NULL)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkRTrms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residual Variance-Covariance Matrices — mkRTrms","text":"data data frame grouping factors covariates. corcall call object specifying residual correlation structure. NULL, identity matrix assumed.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkRTrms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual Variance-Covariance Matrices — mkRTrms","text":"list containing: corcall corframe: processed data frame indexed grouping variables ordering correlation structures. R: block-diagonal residual variance-covariance structure, yet scaled residual variance","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkReTrms.html","id":null,"dir":"Reference","previous_headings":"","what":"Design Matrices and Variance Components for Random Effects — mkReTrms","title":"Design Matrices and Variance Components for Random Effects — mkReTrms","text":"Adapted lme4, function constructs design matrix (Z), variance-covariance matrix (G), etc.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkReTrms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design Matrices and Variance Components for Random Effects — mkReTrms","text":"","code":"mkReTrms(   bars,   fr,   drop.unused.levels = TRUE,   reorder.terms = FALSE,   reorder.vars = FALSE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkReTrms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design Matrices and Variance Components for Random Effects — mkReTrms","text":"bars list parsed random-effects terms fr model frame evaluate terms drop.unused.levels (logical) drop unused factor levels? reorder.terms arrange random effects terms decreasing order number groups (factor levels)? reorder.vars arrange columns individual random effects terms alphabetical order?","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkReTrms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design Matrices and Variance Components for Random Effects — mkReTrms","text":"list following components: Zt: Transposed random-effects design matrix. G: Variance-covariance matrix random effects. Gind: Index mapping variance-covariance parameters positions G. G_temp: List individual variance component matrices random effect. flist: List grouping factors used random effects. cnms: Column names random-effects design matrix. Ztlist: List per-term transposed design matrices random effects. nl: Number levels grouping factor.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkStruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Building Design Matrices and Covariance Structures for Linear Mixed Models — mkStruct","title":"Building Design Matrices and Covariance Structures for Linear Mixed Models — mkStruct","text":"Constructs design matrices fixed random effects, along variance-covariance structures random effects (G-side) residuals (R-side).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkStruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building Design Matrices and Covariance Structures for Linear Mixed Models — mkStruct","text":"","code":"mkStruct(formula, data, corcall)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkStruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building Design Matrices and Covariance Structures for Linear Mixed Models — mkStruct","text":"formula model formula. data data frame containing variables used model. corcall call object specifying residual correlation structure. NULL, identity matrix assumed.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkStruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Building Design Matrices and Covariance Structures for Linear Mixed Models — mkStruct","text":"list containing: data: Processed data frame NA values omitted. fxTrms: Fixed-effects design structure, including model frame design matrix. reTrms: Random-effects structure (applicable), including grouping factors, design matrices, variance-covariance matrix. rTrms: Residual structure (R-side variance-covariance components). formula: Expanded model formula.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Design Object for Power Calculation — mkdesign","title":"Create a Design Object for Power Calculation — mkdesign","text":"Generate design object power analysis specifying model formula data frame. object true experimental design created design generation procedures, randomization unit allocation performed. Instead, serves object containing necessary information power analysis, including design matrices, assumed values model effects, internally calculated parameters.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Design Object for Power Calculation — mkdesign","text":"","code":"mkdesign(   formula,   data,   beta = NULL,   means = NULL,   vcomp = NULL,   sigma2 = NULL,   correlation = NULL,   template = FALSE,   REML = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Design Object for Power Calculation — mkdesign","text":"formula right-hand-side formula specifying model testing treatment effects, terms right ~ , following lme4::lmer syntax random effects. data data frame independent variables specified model, matching design's structure. beta One optional inputs fixed effects. vector model coefficients factor variable coefficients correspond dummy variables created using treatment contrast (stats::contr.treatment). means One optional inputs fixed effects. vector marginal conditioned means (factors interactions). Regression coefficients required numerical variables. Either beta means must provided, values must strictly follow specific order. template can created indicate required input values order. See \"Details\" information. vcomp vector variance-covariance components random effects, present. values must follow strict order. See \"Details\". sigma2 error variance. correlation Specifies residual (R-side) correlation structures using nlme::corClasses functions. See \"Details\" information. template Default FALSE. TRUE formula data provided, template beta, means, vcomp generated indicate required input order. REML Specifies whether use REML ML information matrix. Default TRUE.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Design Object for Power Calculation — mkdesign","text":"list object containing essential components power calculation. includes: Structural components (deStruct): including design matrices fixed random effects, variance-covariance matrices random effects residuals, etc. Internally calculated higher-level parameters (deParam), including variance-covariance matrix beta coefficients (vcov_beta), variance-covariance matrix variance parameters (vcov_varpar), gradient matrices (Jac_list), etc.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Design Object for Power Calculation — mkdesign","text":"data: long-format data frame required, typically used R fitting linear models. data frame can created manually help design creation packages agricolae, AlgDesign, crossdes, FrF2. include independent variables specified model (e.g., treatments, blocks, subjects). irrelevant variables specified model ignored. template: Templates automatically generated formula data supplied, explicitly template = TRUE. Templates serve guides specifying inputs: Template beta: Represents sequence model coefficients. Template means: Specifies order means (categorical variables) /regression coefficients (continuous variables), depending scenario: Categorical variables without interactions: Requires marginal means level categorical variable(s). Interactions among categorical variables: Requires conditional (cell) means level combinations. Numerical variables without interactions: Requires regression coefficients. intercept must also included categorical variables model. Interactions among numerical variables: Requires regression coefficients main effects interaction terms. intercept must also included categorical variables model. Categorical--numerical interactions: Requires regression coefficients numerical variable level categorical variable, well marginal means levels categorical variable. Note: models containing numerical variables, inputs means beta identical. See \"Examples\" illustrative scenarios. Template vcomp: Represents variance-covariance matrix, integers indicate order variance components input vector. correlation: Various residual correlation structures can specified following instructions nlme::corClasses. Note: nlme::corAR1() nlme::corARMA() p=1 q=0, time variable must integer. However, pwr4exp, restriction released, factor also supported.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/mkdesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Design Object for Power Calculation — mkdesign","text":"","code":"# Using templates for specifying \"means\"  # Create an example data frame with four categorical variables (factors) # and two numerical variables df1 <- expand.grid(   fA = factor(1:2),   fB = factor(1:2),   fC = factor(1:3),   fD = factor(1:3),   subject = factor(1:10) ) df1$x <- rnorm(nrow(df1))  # Numerical variable x df1$z <- rnorm(nrow(df1))  # Numerical variable z  ## Categorical variables without interactions # Means of each level of fA and fB are required in sequence. mkdesign(~ fA + fB, df1)$fixeff$means #> fA1 fA2 fB1 fB2  #>   1   2   3   4   ## Interactions among categorical variables # Cell means for all combinations of levels of fA and fB are required. mkdesign(~ fA * fB, df1)$fixeff$means #> fA1:fB1 fA2:fB1 fA1:fB2 fA2:fB2  #>       1       2       3       4   ## Numerical variables without and with interactions, identical to beta. # Without interactions: Regression coefficients are required mkdesign(~ x + z, df1)$fixeff$means #> (Intercept)           x           z  #>           1           2           3   # With interactions: Coefficients for main effects and interaction terms are required. mkdesign(~ x * z, df1)$fixeff$means #> (Intercept)           x           z         x:z  #>           1           2           3           4   ## Categorical-by-numerical interactions # Marginal means for each level of fA, and regression coefficients for x # at each level of fA are required. mkdesign(~ fA * x, df1)$fixeff$means #>   fA1   fA2 fA1:x fA2:x  #>     1     2     3     4   ## Three factors with interactions: # Cell means for all 12 combinations of the levels of fA, fB, and fC are required. mkdesign(~ fA * fB * fC, df1) #> $fixeff #> $fixeff$beta #> (Intercept)         fA2         fB2         fC2         fC3     fA2:fB2  #>           1           2           3           4           5           6  #>     fA2:fC2     fA2:fC3     fB2:fC2     fB2:fC3 fA2:fB2:fC2 fA2:fB2:fC3  #>           7           8           9          10          11          12  #>  #> $fixeff$means #> fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2 fA2:fB1:fC2  #>           1           2           3           4           5           6  #> fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3 fA2:fB2:fC3  #>           7           8           9          10          11          12  #>  #>  #> $varcov #> NULL #>   # A design that mixes the above-mentioned scenarios: # - Interactions among three categorical variables (fA, fB, fC) # - A categorical-by-numerical interaction (fD * x) # - Main effects for another numerical variable (z) # The required inputs are: # - Cell means for all combinations of levels of fA, fB, and fC # - Means for each level of fD # - Regression coefficients for x at each level of fD # - Regression coefficients for z mkdesign(~ fA * fB * fC + fD * x + z, df1)$fixeff$means #>         fD1         fD2         fD3           z       fD1:x       fD2:x  #>           1           2           3           4           5           6  #>       fD3:x fA1:fB1:fC1 fA2:fB1:fC1 fA1:fB2:fC1 fA2:fB2:fC1 fA1:fB1:fC2  #>           7           8           9          10          11          12  #> fA2:fB1:fC2 fA1:fB2:fC2 fA2:fB2:fC2 fA1:fB1:fC3 fA2:fB1:fC3 fA1:fB2:fC3  #>          13          14          15          16          17          18  #> fA2:fB2:fC3  #>          19   # Using templates for specifying \"vcomp\"  # Assume df1 represents an RCBD with \"subject\" as a random blocking factor. ## Variance of the random effect \"subject\" (intercept) is required. mkdesign(~ fA * fB * fC * fD + (1 | subject), df1)$varcov #> $subject #>             (Intercept) #> (Intercept)           1 #>   # Demonstration of templates for more complex random effects ## Note: This example is a demo and statistically incorrect for this data ## (no replicates under subject*fA). It only illustrates variance-covariance templates. ## Inputs required: ## - Variance of the random intercept (1st) ## - Covariance between the intercept and \"fA2\" (2nd) ## - Variance of \"fA2\" (3rd) mkdesign(~ fA * fB * fC * fD + (1 + fA | subject), df1)$varcov #> $subject #>             (Intercept) fA2 #> (Intercept)           1   2 #> fA2                   2   3 #>   # Power analysis for repeated measures  ## Create a data frame for a CRD with repeated measures n_subject <- 6 n_trt <- 3 n_hour <- 8 trt <- c(\"CON\", \"TRT1\", \"TRT2\") df2 <- data.frame(   subject = as.factor(rep(seq_len(n_trt * n_subject), each = n_hour)), # Subject as a factor   hour = as.factor(rep(seq_len(n_hour), n_subject * n_trt)),           # Hour as a factor   trt = rep(trt, each = n_subject * n_hour)                           # Treatment as a factor )  ## Templates temp <- mkdesign(formula = ~ trt * hour, data = df2) temp$fixeff$means  # Fixed effects means template #>  trtCON:hour1 trtTRT1:hour1 trtTRT2:hour1  trtCON:hour2 trtTRT1:hour2  #>             1             2             3             4             5  #> trtTRT2:hour2  trtCON:hour3 trtTRT1:hour3 trtTRT2:hour3  trtCON:hour4  #>             6             7             8             9            10  #> trtTRT1:hour4 trtTRT2:hour4  trtCON:hour5 trtTRT1:hour5 trtTRT2:hour5  #>            11            12            13            14            15  #>  trtCON:hour6 trtTRT1:hour6 trtTRT2:hour6  trtCON:hour7 trtTRT1:hour7  #>            16            17            18            19            20  #> trtTRT2:hour7  trtCON:hour8 trtTRT1:hour8 trtTRT2:hour8  #>            21            22            23            24   ## Create a design object # Assume repeated measures within a subject follow an AR1 process with a correlation of 0.6 design <- mkdesign(   formula = ~ trt * hour,   data = df2,   means = c(1, 2.50, 3.50,             1, 3.50, 4.54,             1, 3.98, 5.80,             1, 4.03, 5.40,             1, 3.68, 5.49,             1, 3.35, 4.71,             1, 3.02, 4.08,             1, 2.94, 3.78),   sigma2 = 2,   correlation = corAR1(value = 0.6, form = ~ hour | subject) )  pwr.anova(design)  # Perform power analysis #> Power of type III F-test #>          NumDF  DenDF sig.level   power #> trt          2 21.563      0.05 1.00000 #> hour         7 86.055      0.05 0.74687 #> trt:hour    14 86.055      0.05 0.38500  ## When time is treated as a numeric variable # Means of treatments and regression coefficients for hour at each treatment level are required df2$hour <- as.integer(df2$hour) mkdesign(formula = ~ trt * hour, data = df2)$fixeff$means #>       trtCON      trtTRT1      trtTRT2  trtCON:hour trtTRT1:hour trtTRT2:hour  #>            1            2            3            4            5            6   ## Polynomial terms of time in the model mkdesign(formula = ~ trt + hour + I(hour^2) + trt:hour + trt:I(hour^2), data = df2)$fixeff$means #>            trtCON           trtTRT1           trtTRT2       trtCON:hour  #>                 1                 2                 3                 4  #>      trtTRT1:hour      trtTRT2:hour  trtCON:I(hour^2) trtTRT1:I(hour^2)  #>                 5                 6                 7                 8  #> trtTRT2:I(hour^2)  #>                 9"},{"path":"https://an-ethz.github.io/pwr4exp/reference/nobars.html","id":null,"dir":"Reference","previous_headings":"","what":"Omit terms separated by vertical bars in a formula — nobars","title":"Omit terms separated by vertical bars in a formula — nobars","text":"Remove random-effects terms mixed-effects formula, thereby producing fixed-effects formula.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/nobars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omit terms separated by vertical bars in a formula — nobars","text":"","code":"nobars(term)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/nobars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omit terms separated by vertical bars in a formula — nobars","text":"term right-hand side mixed-model formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/nobars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omit terms separated by vertical bars in a formula — nobars","text":"fixed-effects part formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/nobars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Omit terms separated by vertical bars in a formula — nobars","text":"function called recursively individual terms model, argument called term name like form, indicating formula.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of omnibus tests — pwr.anova","title":"Power of omnibus tests — pwr.anova","text":"Calculates statistical power testing overall effects treatment factors interactions, .e., power F-test.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of omnibus tests — pwr.anova","text":"","code":"pwr.anova(object, sig.level = 0.05, type = c(\"III\", \"II\", \"I\", \"3\", \"2\", \"1\"))"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of omnibus tests — pwr.anova","text":"object design object created pwr4exp sig.level significance level, default 0.05 type type ANOVA table requested, default Type III","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of omnibus tests — pwr.anova","text":"data frame numerator degrees freedom (NumDF), denominator degrees freedom (DenDF), type error rate (sig.level), power.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of omnibus tests — pwr.anova","text":"","code":"# generate an RCBD rcbd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"1\", \"2\"), facB = c(\"1\", \"2\")),   blocks = 12,   formula = ~ facA*facB + (1|block),   means = c(32, 35, 30, 37),   vcomp = 4,   sigma2 = 6 ) # power of omnibus test pwr.anova(rcbd) #> Power of type III F-test #>           NumDF DenDF sig.level   power #> facA          1    33      0.05 1.00000 #> facB          1    33      0.05 0.05000 #> facA:facB     1    33      0.05 0.78387"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of contrasts — pwr.contrast","title":"Power of contrasts — pwr.contrast","text":"Computes statistical power t-tests comparisons among means.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of contrasts — pwr.contrast","text":"","code":"pwr.contrast(   object,   which,   by = NULL,   contrast = c(\"pairwise\", \"poly\", \"trt.vs.ctrl\"),   sig.level = 0.05,   p.adj = FALSE,   alternative = c(\"two.sided\", \"one.sided\"),   strict = TRUE )"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of contrasts — pwr.contrast","text":"object design object created pwr4exp factor interest. Multiple factors can combined using : *, e.g., \"facA*facB\", represents single factor combines levels factors. variable condition contrast character string specifying contrast method, one \"pairwise\", \"poly\", \"trt.vs.ctrl\". Alternatively, numeric vector defining single contrast (named) list vectors specifying multiple custom contrasts. list provided, element must vector whose length matches number levels factor group. multi-factor scenarios, factor levels combined treated single factor. sig.level significance level, default 0.05 p.adj whether sig.level adjusted using Bonferroni method, default FALSE alternative one- two-sided test. Can abbreviated. strict use strict interpretation two-sided case","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of contrasts — pwr.contrast","text":"condition, returns data frame containing contrast value (effect), degrees freedom (df), type error rate (sig.level), power, test direction (alternative). multiple conditions present, results returned list.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of contrasts — pwr.contrast","text":"","code":"rcbd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"1\", \"2\"), facB = c(\"1\", \"2\")),   blocks = 12,   formula = ~ facA*facB + (1|block),   means = c(32, 35, 30, 37),   vcomp = 4,   sigma2 = 6 )  # If contrast is not specified, pairwise comparisons are conducted pwr.contrast(rcbd, which = \"facA\") # Marginal effect of facA #>               effect df sig.level     power alternative #> facA1 - facA2     -5 33      0.05 0.9999995   two.sided pwr.contrast(rcbd, which = \"facA\", by = \"facB\") # Conditional effect of facA within levels of facB #> $`facB = 1` #>               effect df sig.level     power alternative #> facA1 - facA2     -3 33      0.05 0.8293757   two.sided #>  #> $`facB = 2` #>               effect df sig.level     power alternative #> facA1 - facA2     -7 33      0.05 0.9999993   two.sided #>   # Custom contrast vector, identical to pairwise comparison pwr.contrast(rcbd, which = \"facA\", contrast = c(1, -1)) #>         effect df sig.level     power alternative #> c(1,-1)     -5 33      0.05 0.9999995   two.sided pwr.contrast(rcbd, which = \"facA\", by = \"facB\", contrast = c(1, -1)) #> $`facB = 1` #>         effect df sig.level     power alternative #> c(1,-1)     -3 33      0.05 0.8293757   two.sided #>  #> $`facB = 2` #>         effect df sig.level     power alternative #> c(1,-1)     -7 33      0.05 0.9999993   two.sided #>   # A single factor combining two factors pwr.contrast(   rcbd,   which = \"facA*facB\",   contrast = list(     A1B1vs.A2B1 = c(1, -1, 0, 0),     A1B1vs.A2B2 = c(1, 0, 0, -1)   ) ) #>             effect df sig.level     power alternative #> A1B1vs.A2B1     -3 33      0.05 0.8293757   two.sided #> A1B1vs.A2B2     -5 33      0.05 0.9980739   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Power for model coefficients — pwr.summary","title":"Power for model coefficients — pwr.summary","text":"Computes statistical power testing (t-test) model coefficients.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power for model coefficients — pwr.summary","text":"","code":"pwr.summary(object, sig.level = 0.05)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power for model coefficients — pwr.summary","text":"object design object sig.level significance level, default 0.05","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power for model coefficients — pwr.summary","text":"data frame containing model coefficients, degrees freedom (df), type error rate (sig.level), power, test direction (alternative).","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/pwr.summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power for model coefficients — pwr.summary","text":"","code":"rcbd <- designRCBD(   treatments = c(2, 2),   label = list(facA = c(\"1\", \"2\"), facB = c(\"1\", \"2\")),   blocks = 12,   formula = ~ facA*facB + (1|block),   means = c(32, 35, 30, 37),   vcomp = 4,   sigma2 = 6 ) pwr.summary(rcbd) #>             effect       df sig.level     power alternative #> (Intercept)     32 29.72973      0.05 1.0000000   two.sided #> facA2            3 33.00000      0.05 0.8293757   two.sided #> facB2           -2 33.00000      0.05 0.4927485   two.sided #> facA2:facB2      4 33.00000      0.05 0.7838664   two.sided"},{"path":"https://an-ethz.github.io/pwr4exp/reference/subbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute Bars — subbars","title":"Substitute Bars — subbars","text":"Substitute '+' function '|' '||' function mixed-model formula.","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/subbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute Bars — subbars","text":"","code":"subbars(term)"},{"path":"https://an-ethz.github.io/pwr4exp/reference/subbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute Bars — subbars","text":"term mixed-model formula","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/subbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute Bars — subbars","text":"formula |  || operators replaced +","code":""},{"path":"https://an-ethz.github.io/pwr4exp/reference/subbars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Substitute Bars — subbars","text":"function called recursively individual terms model, argument called term name like form, indicating formula.","code":""},{"path":[]},{"path":"https://an-ethz.github.io/pwr4exp/news/index.html","id":"pwr4exp-010","dir":"Changelog","previous_headings":"","what":"pwr4exp 0.1.0","title":"pwr4exp 0.1.0","text":"CRAN release: 2024-10-11 Initial CRAN submission.","code":""}]
